[{"F:\\Git\\WNC\\onlacademy-react\\src\\index.js":"1","F:\\Git\\WNC\\onlacademy-react\\src\\App.js":"2","F:\\Git\\WNC\\onlacademy-react\\src\\reportWebVitals.js":"3","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\index.jsx":"4","F:\\Git\\WNC\\onlacademy-react\\src\\AppReducer.js":"5","F:\\Git\\WNC\\onlacademy-react\\src\\AppContext.js":"6","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavSearch.jsx":"7","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavHead.jsx":"8","F:\\Git\\WNC\\onlacademy-react\\src\\services\\course.js":"9","F:\\Git\\WNC\\onlacademy-react\\src\\AppTypes.js":"10","F:\\Git\\WNC\\onlacademy-react\\src\\services\\category.js":"11","F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Default\\index.jsx":"12","F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Admin\\index.jsx":"13","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\index.jsx":"14","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\Course\\index.jsx":"15","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Login\\index.jsx":"16","F:\\Git\\WNC\\onlacademy-react\\src\\services\\auth.js":"17","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\makeAPI.js":"18","F:\\Git\\WNC\\onlacademy-react\\src\\AppState.js":"19","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\index.jsx":"20","F:\\Git\\WNC\\onlacademy-react\\src\\components\\PrivateRoute\\index.jsx":"21","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Register\\index.jsx":"22","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\index.jsx":"23","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\index.jsx":"24","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavMenuItem.jsx":"25","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\index.jsx":"26","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\format.js":"27","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\MenuFilter\\index.jsx":"28","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\ItemFilter\\index.jsx":"29","F:\\Git\\WNC\\onlacademy-react\\src\\services\\search.js":"30","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\ModalVideo\\index.jsx":"31","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\MainImage\\index.jsx":"32","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Detail\\index.jsx":"33","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Recommend\\index.jsx":"34","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Feedbback\\index.jsx":"35","F:\\Git\\WNC\\onlacademy-react\\src\\services\\common.js":"36","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Paginate\\index.jsx":"37","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Menu\\index.jsx":"38","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ItemMenu\\index.jsx":"39","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Info\\index.jsx":"40","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ChangePassword\\index.jsx":"41","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Content\\index.jsx":"42","F:\\Git\\WNC\\onlacademy-react\\src\\services\\user.js":"43","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\components\\Content\\index.jsx":"44","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\firebase.js":"45","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Loading\\index.jsx":"46","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\RegisteredCourses\\index.jsx":"47","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Course\\index.jsx":"48","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\index.jsx":"49","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Video\\index.jsx":"50","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\BreadCrumb\\index.jsx":"51","F:\\Git\\WNC\\onlacademy-react\\src\\services\\video.js":"52","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Footer\\index.jsx":"53","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\index.jsx":"54","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Content\\index.jsx":"55","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Menu\\index.jsx":"56","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\ItemMenu\\index.jsx":"57","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Add\\index.jsx":"58","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Lesson\\index.jsx":"59","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\VideoThumbnail\\index.jsx":"60","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\VideoThumbnail\\index.jsx":"61","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\common.js":"62","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddVideo\\index.jsx":"63","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditVideo\\index.jsx":"64","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddSlide\\index.jsx":"65","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditSlide\\index.jsx":"66","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListVideo\\index.jsx":"67","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListSlide\\index.jsx":"68","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\SlideThumbnail\\index.jsx":"69","F:\\Git\\WNC\\onlacademy-react\\src\\services\\slide.js":"70","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Edit\\index.jsx":"71","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListVideo\\index.jsx":"72","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListSlide\\index.jsx":"73","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\SlideThumbnail\\index.jsx":"74","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Slide\\index.jsx":"75","F:\\Git\\WNC\\onlacademy-react\\src\\services\\lovelist.js":"76","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Comment\\index.jsx":"77","F:\\Git\\WNC\\onlacademy-react\\src\\services\\feedback.js":"78"},{"size":500,"mtime":499162500000,"results":"79","hashOfConfig":"80"},{"size":1328,"mtime":1612410789143,"results":"81","hashOfConfig":"80"},{"size":362,"mtime":499162500000,"results":"82","hashOfConfig":"80"},{"size":468,"mtime":1613534288088,"results":"83","hashOfConfig":"80"},{"size":951,"mtime":1613544527670,"results":"84","hashOfConfig":"80"},{"size":145,"mtime":1609934933541,"results":"85","hashOfConfig":"80"},{"size":1569,"mtime":1613544527674,"results":"86","hashOfConfig":"80"},{"size":3224,"mtime":1613577591283,"results":"87","hashOfConfig":"80"},{"size":4148,"mtime":1613372648553,"results":"88","hashOfConfig":"80"},{"size":489,"mtime":1613544527673,"results":"89","hashOfConfig":"80"},{"size":283,"mtime":1611898271886,"results":"90","hashOfConfig":"80"},{"size":1135,"mtime":1610594868743,"results":"91","hashOfConfig":"80"},{"size":343,"mtime":1610531738490,"results":"92","hashOfConfig":"80"},{"size":1764,"mtime":1613544527676,"results":"93","hashOfConfig":"80"},{"size":1605,"mtime":1612942630855,"results":"94","hashOfConfig":"80"},{"size":4960,"mtime":1613577591288,"results":"95","hashOfConfig":"80"},{"size":1906,"mtime":1613577591289,"results":"96","hashOfConfig":"80"},{"size":1709,"mtime":1612752668681,"results":"97","hashOfConfig":"80"},{"size":426,"mtime":1613544527672,"results":"98","hashOfConfig":"80"},{"size":361,"mtime":1612174840582,"results":"99","hashOfConfig":"80"},{"size":563,"mtime":1613459719962,"results":"100","hashOfConfig":"80"},{"size":3912,"mtime":1613577591288,"results":"101","hashOfConfig":"80"},{"size":343,"mtime":1610531738490,"results":"102","hashOfConfig":"80"},{"size":1024,"mtime":1612336383420,"results":"103","hashOfConfig":"80"},{"size":1184,"mtime":1612229723555,"results":"104","hashOfConfig":"80"},{"size":2395,"mtime":1613577591287,"results":"105","hashOfConfig":"80"},{"size":445,"mtime":1612233285761,"results":"106","hashOfConfig":"80"},{"size":2018,"mtime":1613544527675,"results":"107","hashOfConfig":"80"},{"size":415,"mtime":1611477296357,"results":"108","hashOfConfig":"80"},{"size":380,"mtime":1611898059011,"results":"109","hashOfConfig":"80"},{"size":873,"mtime":1612324376713,"results":"110","hashOfConfig":"80"},{"size":214,"mtime":1612942580507,"results":"111","hashOfConfig":"80"},{"size":3705,"mtime":1613394738785,"results":"112","hashOfConfig":"80"},{"size":1772,"mtime":1611540031852,"results":"113","hashOfConfig":"80"},{"size":664,"mtime":1613577591286,"results":"114","hashOfConfig":"80"},{"size":277,"mtime":1611715877186,"results":"115","hashOfConfig":"80"},{"size":1347,"mtime":1611893581743,"results":"116","hashOfConfig":"80"},{"size":1730,"mtime":1612774767608,"results":"117","hashOfConfig":"80"},{"size":588,"mtime":1612063163627,"results":"118","hashOfConfig":"80"},{"size":7277,"mtime":1613474811851,"results":"119","hashOfConfig":"80"},{"size":4262,"mtime":1613475079787,"results":"120","hashOfConfig":"80"},{"size":862,"mtime":1612774520203,"results":"121","hashOfConfig":"80"},{"size":934,"mtime":1612754660287,"results":"122","hashOfConfig":"80"},{"size":943,"mtime":1613458221582,"results":"123","hashOfConfig":"80"},{"size":662,"mtime":1612165114280,"results":"124","hashOfConfig":"80"},{"size":292,"mtime":1612179811689,"results":"125","hashOfConfig":"80"},{"size":4288,"mtime":1613479967072,"results":"126","hashOfConfig":"80"},{"size":3900,"mtime":1613635776354,"results":"127","hashOfConfig":"80"},{"size":4063,"mtime":1613459672688,"results":"128","hashOfConfig":"80"},{"size":525,"mtime":1613632950673,"results":"129","hashOfConfig":"80"},{"size":516,"mtime":1612321365767,"results":"130","hashOfConfig":"80"},{"size":1341,"mtime":1613454606416,"results":"131","hashOfConfig":"80"},{"size":1336,"mtime":1612342954371,"results":"132","hashOfConfig":"80"},{"size":749,"mtime":1612409258267,"results":"133","hashOfConfig":"80"},{"size":1175,"mtime":1613190700043,"results":"134","hashOfConfig":"80"},{"size":1447,"mtime":1613190897969,"results":"135","hashOfConfig":"80"},{"size":430,"mtime":1612407539596,"results":"136","hashOfConfig":"80"},{"size":10319,"mtime":1613476574972,"results":"137","hashOfConfig":"80"},{"size":6751,"mtime":1613137657538,"results":"138","hashOfConfig":"80"},{"size":598,"mtime":1613095886776,"results":"139","hashOfConfig":"80"},{"size":772,"mtime":1612856379588,"results":"140","hashOfConfig":"80"},{"size":1001,"mtime":1613031700512,"results":"141","hashOfConfig":"80"},{"size":5042,"mtime":1613476320521,"results":"142","hashOfConfig":"80"},{"size":6489,"mtime":1613475772022,"results":"143","hashOfConfig":"80"},{"size":5022,"mtime":1613476373990,"results":"144","hashOfConfig":"80"},{"size":6042,"mtime":1613475815587,"results":"145","hashOfConfig":"80"},{"size":569,"mtime":1613059087563,"results":"146","hashOfConfig":"80"},{"size":575,"mtime":1613113380888,"results":"147","hashOfConfig":"80"},{"size":586,"mtime":1613115949717,"results":"148","hashOfConfig":"80"},{"size":1034,"mtime":1613455152350,"results":"149","hashOfConfig":"80"},{"size":17856,"mtime":1613476293360,"results":"150","hashOfConfig":"80"},{"size":572,"mtime":1613312907114,"results":"151","hashOfConfig":"80"},{"size":572,"mtime":1613311613421,"results":"152","hashOfConfig":"80"},{"size":760,"mtime":1613312775981,"results":"153","hashOfConfig":"80"},{"size":433,"mtime":1613312533401,"results":"154","hashOfConfig":"80"},{"size":1062,"mtime":1613481658189,"results":"155","hashOfConfig":"80"},{"size":487,"mtime":1613577591285,"results":"156","hashOfConfig":"80"},{"size":402,"mtime":1613635437393,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"f1vsdx",{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"160"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"160"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"160"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"160"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"160"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"160"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"160"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"160"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"160"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"160"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"160"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"160"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"160"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"160"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\Git\\WNC\\onlacademy-react\\src\\index.js",[],["331","332"],"F:\\Git\\WNC\\onlacademy-react\\src\\App.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\reportWebVitals.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppReducer.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppContext.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavSearch.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavHead.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\course.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppTypes.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\category.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Default\\index.jsx",["333"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport Header from '../../components/Header';\r\nimport Menu from './components/Menu';\r\nimport Content from './components/Content';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { INIT_HOME } from '../../AppTypes';\r\nimport { getInitCategories } from '../../services/category';\r\nimport { getInitCourses } from '../../services/course';\r\n\r\nimport './index.css';\r\n\r\nconst Default = (props) => {\r\n\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let categories = await getInitCategories();\r\n      let courses = await getInitCourses();\r\n\r\n      dispatch({\r\n        type: INIT_HOME,\r\n        payload: {\r\n          categories,\r\n          courses\r\n        }\r\n      });\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container className=\"main\">\r\n        <Row>\r\n          <Menu />\r\n          <Content />\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Default;",["334","335"],"F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Admin\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\index.jsx",["336"],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\Course\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Login\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\auth.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\utils\\makeAPI.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppState.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\PrivateRoute\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Register\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\index.jsx",["337"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport Header from '../../components/Header';\r\nimport Content from './components/Content';\r\nimport Footer from '../../components/Footer';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { INIT_MENU_HEADER } from '../../AppTypes';\r\nimport { getInitCategories } from '../../services/category';\r\n\r\nimport './index.css';\r\n\r\nconst Default = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let categories = await getInitCategories();\r\n      dispatch({\r\n        type: INIT_MENU_HEADER,\r\n        payload: {\r\n          categories,\r\n        }\r\n      });\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container className=\"main\">\r\n        <Row>\r\n          <Content />\r\n        </Row>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Default;","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavMenuItem.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\index.jsx",["338"],"F:\\Git\\WNC\\onlacademy-react\\src\\utils\\format.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\MenuFilter\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\ItemFilter\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\search.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\ModalVideo\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\MainImage\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Detail\\index.jsx",["339"],"import { React, useContext, useState, useEffect } from 'react';\r\nimport parse from 'html-react-parser';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport { formatToVND, ddmmyy } from '../../../../utils/format';\r\nimport { alertMessage } from '../../../../utils/common';\r\nimport { buyCourse } from '../../../../services/course';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\n\r\nimport './index.css';\r\n\r\nconst Detail = ({ course, onShowModal }) => {\r\n  const history = useHistory();\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isBuy, setIsBuy] = useState(false);\r\n  const handleShow = () => {\r\n    onShowModal();\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isBuy) {\r\n      const BuyCourse = async () => {\r\n        const bought = await buyCourse(course.id);\r\n        if (mounted) {\r\n          if (bought.state) {\r\n            alertMessage({ type: 'success', message: 'Mua khóa học thành công' });\r\n            setIsLoading(false);\r\n            setIsBuy(false);\r\n          } else {\r\n            if (bought.auth !== undefined && bought.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n              alertMessage({ type: 'error', message: 'Đăng nhập để mua khóa học' })\r\n              setIsBuy(false);\r\n              setIsLoading(false);\r\n              history.push('/login');\r\n            }\r\n          }\r\n        }\r\n      }\r\n      BuyCourse();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isBuy, course]);\r\n\r\n  const onBuyCourse_clicked = async () => {\r\n    setIsLoading(true);\r\n    setIsBuy(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Jumbotron className=\"pt-0 pb-0 bg-l\">\r\n        <h1>{course.name}</h1>\r\n        <p>\r\n          <strong>{course.sort_desc}</strong>\r\n        </p>\r\n        <p>\r\n          <Badge variant=\"warning\">Điểm đánh giá</Badge>&nbsp;\r\n          <span className=\"yellow w6 mr-3\">\r\n            {course.point_evaluate || '(Chưa có đánh giá)'} <i className=\"fa fa-thumbs-o-up\"></i>\r\n          </span>&nbsp;\r\n          <span className=\"w6\">\r\n            {course.qty_student_registed || '(Chưa có học viên)'} học viên\r\n          </span>\r\n        </p>\r\n        <p>\r\n          <strong><i className=\"fa fa-graduation-cap\"></i> Giáo viên: <span className=\"info\">{course.teacher}</span></strong>\r\n        </p>\r\n        <p>\r\n          <strong><i className=\"fa fa-cloud-upload\"></i> Cập nhật: {ddmmyy(course.updated_at)}</strong>\r\n        </p>\r\n        {course.price_promo > 0\r\n          ?\r\n          <h4>\r\n            <i className=\"fa fa-tag\"></i> {formatToVND(course.price_promo)}&nbsp;\r\n          <span className=\"discount\">{formatToVND(course.price)}</span>\r\n          </h4>\r\n          :\r\n          <h4>\r\n            <i className=\"fa fa-tag\"></i> {formatToVND(course.price)}\r\n          </h4>\r\n        }\r\n        <p>\r\n          <Button variant=\"outline-info mr-3\" onClick={onBuyCourse_clicked}>\r\n            <strong>Mua khóa học</strong>\r\n          </Button>\r\n          <Button variant=\"outline-danger\" onClick={handleShow}><strong>Xem trước</strong></Button>\r\n        </p>\r\n        <hr />\r\n        <h5>Chi tiết</h5>\r\n        {parse(course.detail_desc || '')}\r\n      </Jumbotron>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Recommend\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Feedbback\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\common.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Paginate\\index.jsx",["340"],"import React, { useState, useEffect } from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport './index.css';\r\n\r\nconst Paginate = ({ paginate, onPageChange }) => {\r\n  const [forcePage, setForcePage] = useState(null);\r\n  useEffect(() => {\r\n    if (paginate.currentPage !== forcePage + 1) {\r\n      setForcePage(0);\r\n    }\r\n  }, [paginate.uri, paginate.currentPage])\r\n\r\n  const handlePageClick = (data) => {\r\n    setForcePage(data.selected);\r\n    const api = `${paginate.uri}&limit=${paginate.limit}&page=${data.selected + 1}`;\r\n    onPageChange(api);\r\n  }\r\n\r\n  return (\r\n    <ReactPaginate\r\n      pageCount={paginate.totalPages}\r\n      marginPagesDisplayed={1}\r\n      pageRangeDisplayed={2}\r\n      onPageChange={handlePageClick}\r\n      containerClassName={'pagination paginate-cus'}\r\n      previousLabel={<i className=\"fa fa-angle-left\"></i>}\r\n      previousClassName={'page-item'}\r\n      previousLinkClassName={'page-link'}\r\n      nextLabel={<i className=\"fa fa-angle-right\"></i>}\r\n      nextClassName={'page-item'}\r\n      nextLinkClassName={'page-link'}\r\n      breakLabel={'...'}\r\n      breakClassName={'page-item'}\r\n      breakLinkClassName={'page-link'}\r\n      pageClassName={'page-item'}\r\n      pageLinkClassName={'page-link'}\r\n      activeClassName={'active'}\r\n      forcePage={forcePage}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Paginate;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Menu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ItemMenu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Info\\index.jsx",["341","342"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport {\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  stringGenerate,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { getUser } from '../../../../services/user';\r\nimport { update } from '../../../../services/user';\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  full_name: yup.string(),\r\n  address: yup.string(),\r\n  phone: yup\r\n    .string()\r\n    .max(11, 'Số điện thoại của bạn không hợp lệ')\r\n    .min(10, 'Số điện thoại của bạn không hợp lệ')\r\n});\r\n\r\nconst Info = () => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [user, setUser] = useState({\r\n    id: '',\r\n    username: '',\r\n    full_name: '',\r\n    phone: '',\r\n    address: '',\r\n    img_url: '',\r\n    img_name: ''\r\n  });\r\n  const [chooseFile, setChooseFile] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res = await getUser();\r\n      if (res.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        setUser(res);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleChooseFile = (event) => {\r\n    const file = event.target.files[0];\r\n    const previewFile = URL.createObjectURL(file);\r\n    setUser({ ...user, img_url: previewFile });\r\n    setChooseFile(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessError;\r\n        const result = await update(formData);\r\n        if (mounted) {\r\n          if (result.state) {\r\n            setIsSubmit(false);\r\n            if (user.img_name !== '' && user.img_name !== null) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: user.img_name,\r\n                folderUrl: `images/avatar/user-${user.id}`\r\n              });\r\n              setChooseFile(false);\r\n            }\r\n            setUser({\r\n              ...user,\r\n              img_url: formData.img_url,\r\n              img_name: formData.img_name\r\n            });\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ trong quá trình cập nhật.' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật thông tin thành công.' });\r\n            }\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'error', message: 'Cập nhật thông tin thất bại.' });\r\n            setIsLoading(false);\r\n            if (result.auth !== undefined && result.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n    return mounted = false;\r\n\r\n  }, [isSubmit, setUser, user, formData]);\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.image;\r\n\r\n    let imgName = stringGenerate();\r\n    if (chooseFile) {\r\n      imgName += data.image[0].name;\r\n      const url = await uploadToFirebase({\r\n        file: data.image[0],\r\n        fileName: imgName,\r\n        folderUrl: `images/avatar/user-${user.id}`\r\n      });\r\n\r\n      if (url === null) {\r\n        alertMessage({ type: 'error', message: 'Cập nhật thất bại' });\r\n        setIsLoading(false);\r\n        setChooseFile(false);\r\n        return;\r\n      }\r\n      form.img_url = url;\r\n      form.img_name = imgName;\r\n    } else {\r\n      form.img_url = user.img_url;\r\n      form.img_name = user.img_name;\r\n    }\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={8} className=\"col-relative\">\r\n            <Form.Group>\r\n              <Form.Label>Tài khoản</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" defaultValue={user.username} readOnly />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\"></span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" defaultValue={user.email} readOnly />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\"></span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Họ và tên</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"full_name\" defaultValue={user.full_name} ref={register} placeholder=\"Nhập họ tên\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.full_name?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n              <Form.Label>Địa chỉ</Form.Label>\r\n              <Form.Control as=\"textarea\" name=\"address\" defaultValue={user.address} ref={register} rows={3} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.address?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Điện thoại</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"phone\" defaultValue={user.phone} ref={register} placeholder=\"Nhập số điện thoại\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.phone?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" className=\"btn-update\" variant=\"outline-dark\">Cập nhật</Button>\r\n          </Col>\r\n          <Col lg={4}>\r\n            <Image className=\"avatar\" src={user.img_url} roundedCircle />\r\n            <Form.Group>\r\n              <Form.File id=\"exampleFormControlFile1\" name=\"image\" onChange={handleChooseFile} ref={register} accept=\"image/*\" />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Info;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ChangePassword\\index.jsx",["343"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport AppContext from '../../../../AppContext';\r\nimport { changePassword } from '../../../../services/user';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  old_password: yup\r\n    .string()\r\n    .required('Bạn chưa nhập mật khẩu cũ')\r\n    .min(8, \"Mật khẩu phải từ 8 kí tự trở lên\"),\r\n  password: yup\r\n    .string()\r\n    .required('Bạn chưa nhập mật khẩu mới')\r\n    .min(8, \"Mật khẩu phải từ 8 kí tự trở lên\"),\r\n  confirm_password: yup\r\n    .string()\r\n    .required('Bạn chưa nhập xác nhận mật khẩu mới')\r\n    .oneOf([yup.ref(\"password\")], \"Mật khẩu mới không giống nhau\")\r\n});\r\n\r\nconst ChangePassword = () => {\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await changePassword(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Đổi mật khẩu thành công' });\r\n            setIsLoading(false);\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'error', message: 'Đổi mật khẩu thất bại' });\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n  }, [isSubmit, formData, reset]);\r\n\r\n  const onSubmit = (data) => {\r\n    setIsLoading(true);\r\n    setFormData(data);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Row>\r\n        <Col lg={8} className=\"form-relative\">\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Form.Group>\r\n              <Form.Label>Mật khẩu cũ</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"old_password\" ref={register} placeholder=\"Mật khẩu cũ\" autoFocus />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.old_password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Mật khẩu mới</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"password\" ref={register} placeholder=\"Mật khẩu mới\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Nhập lại mật khẩu mới</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"confirm_password\" ref={register} placeholder=\"Mật khẩu mới\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.confirm_password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" className=\"btn-change-password\" variant=\"outline-dark\">Đổi mật khẩu</Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ChangePassword;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Content\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\user.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\components\\Content\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\utils\\firebase.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Loading\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\RegisteredCourses\\index.jsx",["344","345","346"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport Course from '../Course';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { getUserCourses } from '../../../../services/course';\r\nimport { create, remove } from '../../../../services/lovelist';\r\nimport { getLoveList } from '../../../../services/lovelist';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst RegisteredCourses = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isAdd, setIsAdd] = useState(false);\r\n  const [isSub, setIsSub] = useState(false);\r\n  const [userCourses, setUserCourses] = useState([]);\r\n  const [loveIds, setLoveIds] = useState([]);\r\n  const isExist = userCourses.length > 0;\r\n  const [userCourseStarId, setUserCourseStarId] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let result = await getUserCourses();\r\n      if (result.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        setUserCourses(result)\r\n      }\r\n    }\r\n    fetchData();\r\n\r\n    const fetchLoveList = async () => {\r\n      let res = await getLoveList();\r\n      if (res.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        let ids = res.reduce((prev, cur) => {\r\n          prev.push(cur.courses_id);\r\n          return prev;\r\n        }, [])\r\n        setLoveIds(ids);\r\n      }\r\n    }\r\n    fetchLoveList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isAdd) {\r\n      const actionAddStar = async () => {\r\n        let res = await create(userCourseStarId);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsAdd(false);\r\n            setLoveIds([...loveIds, userCourseStarId]);\r\n            alertMessage({ type: 'success', message: 'Thêm vào danh sách yêu thích thành công' })\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Thêm vào danh sách yêu thích thất bại' })\r\n            setIsAdd(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionAddStar();\r\n    }\r\n\r\n    return () => mounted = false;\r\n  }, [isAdd, userCourseStarId, loveIds]);\r\n\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSub) {\r\n      const actionSubStar = async () => {\r\n        console.log('remove');\r\n        let res = await remove(userCourseStarId);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSub(false);\r\n            let newList = loveIds.filter(id => id !== userCourseStarId)\r\n            setLoveIds(newList);\r\n            alertMessage({ type: 'success', message: 'Xóa khỏi danh sách yêu thích thành công' })\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Xóa khỏi danh sách yêu thích thất bại' })\r\n            setIsSub(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionSubStar();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSub, userCourseStarId, loveIds])\r\n\r\n  const handleClickAddStar = (userCourse) => {\r\n    setUserCourseStarId(userCourse.courses_id);\r\n    setIsAdd(true);\r\n  }\r\n\r\n  const handleClickSubStar = (userCourse) => {\r\n    setUserCourseStarId(userCourse.courses_id);\r\n    setIsSub(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { isExist ?\r\n        userCourses.map((userCourse, idx) =>\r\n          <Course key={idx} userCourse={userCourse} onClickAddStart={handleClickAddStar} onClickSubStart={handleClickSubStar} loveIds={loveIds} />\r\n        )\r\n        :\r\n        <div>Bạn chưa chưa mua bất kì khóa học nào</div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RegisteredCourses;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Course\\index.jsx",["347"],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\index.jsx",["348"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport ListVideo from './components/ListVideo';\r\nimport ListSlide from './components/ListSlide';\r\nimport Video from './components/Video';\r\nimport Slide from './components/Slide';\r\nimport BreadCrumb from './components/BreadCrumb';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { LOGOUT } from '../../AppTypes';\r\nimport { getVideos } from '../../services/video';\r\nimport { getSlides } from '../../services/slide';\r\n\r\nconst Document = () => {\r\n  const { courseId } = useParams();\r\n  const { dispatch } = useContext(AppContext);\r\n  const [videos, setVideos] = useState([]);\r\n  const [videoActive, setVideoActive] = useState(null);\r\n  const [slides, setSlides] = useState([]);\r\n  const [slideActive, setSlideActive] = useState(null);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const resVideo = await getVideos(courseId);\r\n      const resSlide = await getSlides(courseId);\r\n      if (resVideo.state) {\r\n        setVideos(resVideo);\r\n        setVideoActive(resVideo[0]);\r\n      }\r\n      if (resSlide.state) {\r\n        setSlides(resSlide);\r\n        setSlideActive(resSlide[0]);\r\n      }\r\n      if (!resVideo.state || !resSlide.state) {\r\n        if (\r\n          (resVideo.auth !== undefined && resVideo.auth.authenticated === false) ||\r\n          (resSlide.auth !== undefined && resSlide.auth.authenticated === false)\r\n        ) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n          history.push('/login')\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleShowVideoActive = (video) => {\r\n    setVideoActive(video);\r\n  }\r\n\r\n  const handleShowSlideActive = (slide) => {\r\n    setSlideActive(slide);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg={12} xs={12}>\r\n        <BreadCrumb courseId={courseId} />\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n              <strong><i className=\"fa fa-angle-down\"></i> Danh sách video bài giảng</strong>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                {videos.length > 0\r\n                  ? <Row>\r\n                    <Col lg={3}>\r\n                      <ListVideo videos={videos} onShowVideoActive={handleShowVideoActive} videoActive={videoActive} />\r\n                    </Col>\r\n                    <Col lg={9}>\r\n                      <Video video={videoActive} />\r\n                    </Col>\r\n                  </Row>\r\n                  : <div>Bạn chưa mua khóa học này hoặc tài liệu chưa được cập nhật.</div>\r\n                }\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n\r\n          <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n              <strong><i className=\"fa fa-angle-down\"></i> Tài liệu bài giảng</strong>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <Card.Body>\r\n                {slides.length > 0\r\n                  ? <Row>\r\n                    <Col lg={3}>\r\n                      <ListSlide slides={slides} onShowSlideActive={handleShowSlideActive} slideActive={slideActive} />\r\n                    </Col>\r\n                    <Col lg={9}>\r\n                      <Slide slide={slideActive} />\r\n                    </Col>\r\n                  </Row>\r\n                  : <div>Bạn chưa mua khóa học này hoặc tài liệu chưa được cập nhật.</div>\r\n                }\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Document;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Video\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\BreadCrumb\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\video.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Footer\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Content\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Menu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\ItemMenu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Add\\index.jsx",["349","350"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport { getInitCategories } from '../../../../services/category';\r\nimport { getUser } from '../../../../services/user';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { create } from '../../../../services/course';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Bạn chưa nhập tiêu đề khóa học'),\r\n  name: yup.string().required('Bạn chưa nhập tên khóa học'),\r\n  sort_desc: yup.string().required('Bạn chưa nhập mô tả')\r\n});\r\n\r\nconst Add = () => {\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [previewImgLarge, setPreviewImgLarge] = useState('');\r\n  const [previewImgSmall, setPreviewImgSmall] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [user, setUser] = useState({\r\n    id: null,\r\n    name: null,\r\n  })\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      let res = await getUser();\r\n      if (res.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        setUser(res);\r\n      }\r\n    }\r\n    fetchUser();\r\n    const fetchData = async () => {\r\n      let result = await getInitCategories();\r\n      let initial = [];\r\n      let remap = result.reduce((accumulator, currentValue) => {\r\n        accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n        return accumulator;\r\n      }, initial);\r\n      setCategories(remap);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await create(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Tạo khóa học thành công.' });\r\n            setIsLoading(false);\r\n            setPreviewImgSmall('');\r\n            setPreviewImgLarge('');\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            await removeToFirebase({\r\n              fileName: formData.img_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            await removeToFirebase({\r\n              fileName: formData.img_large_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            alertMessage({ type: 'error', message: 'Tạo khóa học thất bại.' });\r\n            setIsLoading(false);\r\n            setPreviewImgSmall('');\r\n            setPreviewImgLarge('');\r\n            reset();\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, reset, user]);\r\n\r\n  const handleFile = (file) => {\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'image') {\r\n      return null;\r\n    }\r\n    let path = URL.createObjectURL(file);\r\n    return path;\r\n  }\r\n\r\n  const handleChooseImaSmall = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n      setPreviewImgSmall('')\r\n    } else {\r\n      setPreviewImgSmall(path);\r\n    }\r\n  }\r\n\r\n  const handleChooseImaLarge = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n      setPreviewImgLarge('');\r\n    } else {\r\n      setPreviewImgLarge(path);\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.small_image;\r\n    delete form.large_image;\r\n\r\n    if (previewImgLarge === '' || previewImgSmall === '') {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn ảnh cho khóa học!' });\r\n      setIsLoading(false);\r\n      return\r\n    }\r\n\r\n    let imgName = stringGenerate() + data.small_image[0].name;\r\n    let imgLargeName = stringGenerate() + data.large_image[0].name;\r\n\r\n    let urlImg = await uploadToFirebase({\r\n      file: data.small_image[0],\r\n      fileName: imgName,\r\n      folderUrl: `images/courses/teacher-id-${user.id}`\r\n    });\r\n    let urlLargeImg = await uploadToFirebase({\r\n      file: data.large_image[0],\r\n      fileName: imgLargeName,\r\n      folderUrl: `images/courses/teacher-id-${user.id}`\r\n    });\r\n    if (urlImg === null || urlLargeImg === null) {\r\n      alertMessage({ type: 'error', message: 'Đã có lỗi xảy ra!' });\r\n      setIsLoading(false);\r\n      setPreviewImgSmall('');\r\n      setPreviewImgLarge('');\r\n      reset();\r\n      return;\r\n    }\r\n    form.img = urlImg;\r\n    form.img_large = urlLargeImg;\r\n    form.img_name = imgName;\r\n    form.img_large_name = imgLargeName;\r\n    form.teacher = user.full_name;\r\n    form.detail_desc = description;\r\n    form.categories_id = +data.categories_id;\r\n    form.price = +data.price;\r\n    form.price_promo = +data.price_promo;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={9} xs={12} className=\"col-form-create\">\r\n            <Form.Group>\r\n              <Form.Label>Lĩnh vực</Form.Label>\r\n              <select className=\"form-control\" name=\"categories_id\" ref={register}>\r\n                {categories.map((opt, idx) =>\r\n                  <option key={idx} defaultValue={idx === 0 ? opt.value : null} value={opt.value}>{opt.label}</option>\r\n                )}\r\n              </select>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Tiêu đề</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"title\" ref={register} placeholder=\"Nhập tiêu đề\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.title?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Tên khóa học</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Nhập tên khóa học\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.name?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n              <Form.Label>Mô tả ngắn</Form.Label>\r\n              <Form.Control as=\"textarea\" name=\"sort_desc\" ref={register} rows={3} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.sort_desc?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Mô tả chi tiết</Form.Label>\r\n              <ReactQuill\r\n                theme=\"snow\"\r\n                name=\"detail_desc\"\r\n                style={{ height: '200px', marginBottom: '35px' }}\r\n                value={description}\r\n                onChange={setDescription}\r\n                ref={register}\r\n              />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.detail_desc?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Ảnh nhỏ</Form.Label><br />\r\n              <Image className=\"avatar\" src={previewImgSmall} roundedCircle />\r\n              <Form.File name=\"small_image\" onChange={handleChooseImaSmall} ref={register} accept=\"image/*\" />\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Ảnh lớn</Form.Label><br />\r\n              <Image className=\"avatar\" src={previewImgLarge} roundedCircle />\r\n              <Form.File name=\"large_image\" onChange={handleChooseImaLarge} ref={register} accept=\"image/*\" />\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Giá</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"number\" name=\"price\" ref={register} placeholder=\"Nhập giá khóa học\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.price?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Giá khuyến mãi (nếu có)</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"number\" name=\"price_promo\" ref={register} placeholder=\"Nhập giá khóa học\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.price_promo?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" className=\"btn-create\" variant=\"outline-dark\">Thêm khóa học</Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Add;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Lesson\\index.jsx",["351"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Select from 'react-select';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { coursesOfTeacher } from '../../../../services/course';\r\nimport { getVideos } from '../../../../services/video';\r\nimport { getSlides } from '../../../../services/slide';\r\nimport { getUser } from '../../../../services/user';\r\n\r\nimport ListVideo from '../ListVideo';\r\nimport ListSlide from '../ListSlide';\r\nimport AddVideo from '../AddVideo';\r\nimport AddSlide from '../AddSlide';\r\nimport EditVideo from '../EditVideo';\r\nimport EditSlide from '../EditSlide';\r\n\r\nimport './index.css';\r\n\r\nconst Lesson = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const [courses, setCourses] = useState([]);\r\n  const [selected, setSelected] = useState({ value: null, label: null });\r\n  const [videos, setVideos] = useState([]);\r\n  const [slides, setSlides] = useState([]);\r\n  const [isShowButtonAdd, setIsShowButtonAdd] = useState(false);\r\n  const [videoActive, setVideoActive] = useState(null);\r\n  const [slideActive, setSlideActive] = useState(null);\r\n  const [user, setUser] = useState({ id: null, name: '' });\r\n  const [toggleAdd, setToggleAdd] = useState(true);\r\n  const [toggleEdit, setToggleEdit] = useState(true);\r\n  const [toggleList, setToggleList] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      let res = await getUser();\r\n      if (res.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        setUser(res);\r\n      }\r\n    }\r\n    fetchUser();\r\n\r\n    const fetchData = async () => {\r\n      let res = await coursesOfTeacher();\r\n      if (res.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        let initial = [];\r\n        let remap = res.reduce((accumulator, currentValue) => {\r\n          accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n          return accumulator;\r\n        }, initial);\r\n        setCourses(remap);\r\n        setSelected(remap[0])\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleSelectChange = async (selected) => {\r\n    setSelected(selected);\r\n    let videos = await getVideos(selected.value);\r\n    if (videos.authenticated === false) {\r\n      dispatch({\r\n        type: LOGOUT,\r\n        payload: {\r\n          isLogged: false\r\n        }\r\n      });\r\n    } else {\r\n      setVideos(videos);\r\n    }\r\n\r\n    let slides = await getSlides(selected.value);\r\n    if (slides.authenticated === false) {\r\n      dispatch({\r\n        type: LOGOUT,\r\n        payload: {\r\n          isLogged: false\r\n        }\r\n      });\r\n    } else {\r\n      setSlides(slides)\r\n    }\r\n\r\n    setIsShowButtonAdd(false);\r\n  }\r\n\r\n  const handleVideoActive = (video) => {\r\n    setVideoActive(video);\r\n    setIsShowButtonAdd(true);\r\n    setToggleAdd(true);\r\n    setToggleEdit(true);\r\n    setToggleList(true);\r\n  }\r\n\r\n  const handleSlideActive = (slide) => {\r\n    setSlideActive(slide);\r\n    setIsShowButtonAdd(true);\r\n    setToggleAdd(false);\r\n    setToggleEdit(false);\r\n    setToggleList(false);\r\n  }\r\n\r\n  const onAdd_clicked = () => {\r\n    setIsShowButtonAdd(false);\r\n    setToggleAdd(true);\r\n    setToggleEdit(true);\r\n    setToggleList(true);\r\n  }\r\n\r\n  const handleUpdateVideo = (video) => {\r\n    let newVideos = [...videos];\r\n    let videoUpdateId = newVideos.findIndex(item => item.id === video.id);\r\n    newVideos[videoUpdateId] = video;\r\n    setVideos(newVideos)\r\n  }\r\n\r\n  const handleUpdateSlide = (slide) => {\r\n    let newSlides = [...slides];\r\n    let slideUpdateId = newSlides.findIndex(item => item.id === slide.id);\r\n    newSlides[slideUpdateId] = slide;\r\n    setSlides(newSlides);\r\n  }\r\n\r\n  const handleGetNewVideo = (video) => {\r\n    setVideos([...videos, video]);\r\n  }\r\n\r\n  const handleGetNewSlide = (slide) => {\r\n    setSlides([...slides, slide]);\r\n  }\r\n\r\n  const handleShowSlide = () => {\r\n    setToggleAdd(false);\r\n    setToggleList(false);\r\n  }\r\n\r\n  const handleShowVideo = () => {\r\n    setToggleAdd(true);\r\n    setToggleList(true);\r\n  }\r\n\r\n  const handleShowEditVideo = () => {\r\n    setToggleEdit(true);\r\n    setToggleList(true);\r\n    setVideoActive(videos[0]);\r\n  }\r\n\r\n  const handleShowEditSlide = () => {\r\n    setToggleEdit(false);\r\n    setToggleList(false);\r\n    setSlideActive(slides[0]);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg={12} xs={12}>\r\n          <Form.Group>\r\n            <Form.Label>Khóa học đã tạo</Form.Label>\r\n            <Select\r\n              value={selected}\r\n              onChange={handleSelectChange}\r\n              isClearable={false}\r\n              isSearchable={true}\r\n              options={courses}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col lg={12} xs={12}>\r\n          <Row>\r\n            <Col lg={4} xs={12}>\r\n              {toggleList\r\n                ? <ListVideo videos={videos} onVideoActive={handleVideoActive} />\r\n                : <ListSlide slides={slides} onSlideActive={handleSlideActive} />\r\n              }\r\n            </Col>\r\n            <Col lg={8} xs={12} className=\"form-relative\">\r\n              {isShowButtonAdd &&\r\n                <>\r\n                  <Button variant=\"outline-danger\" className=\"btn-add\" onClick={onAdd_clicked}>\r\n                    <i className=\"fa fa-plus\"></i> Thêm mới\r\n                  </Button>\r\n                  {toggleEdit\r\n                    ? <EditVideo courseId={selected.value} videoUpdate={videoActive} user={user} onUpdateVideo={handleUpdateVideo} onShowEditSlide={handleShowEditSlide} />\r\n                    : <EditSlide courseId={selected.value} slideUpdate={slideActive} user={user} onUpdateSlide={handleUpdateSlide} onShowEditVideo={handleShowEditVideo} />\r\n                  }\r\n                </>\r\n              }\r\n              {!isShowButtonAdd &&\r\n                <>\r\n                  {toggleAdd\r\n                    ? <AddVideo courseId={selected.value} user={user} onNewVideo={handleGetNewVideo} onShowAddSlide={handleShowSlide} />\r\n                    : <AddSlide courseId={selected.value} user={user} onNewSlide={handleGetNewSlide} onShowAddVideo={handleShowVideo} />\r\n                  }\r\n                </>\r\n              }\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Lesson;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\VideoThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\VideoThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\utils\\common.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddVideo\\index.jsx",["352"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport { create } from '../../../../services/video';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên bài giảng')\r\n});\r\n\r\nconst AddVideo = ({ courseId, user, onNewVideo, onShowAddSlide }) => {\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewVideo, setPreviewVideo] = useState('');\r\n  const [formData, setFormData] = useState(null);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  const handleChooseFile = (e) => {\r\n    let file = e.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'video') {\r\n      setPreviewVideo('');\r\n      return;\r\n    }\r\n    setPreviewVideo(URL.createObjectURL(file));\r\n  }\r\n\r\n  const handleShowAddSlide = () => {\r\n    onShowAddSlide();\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await create(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Tạo bài giảng thành công' });\r\n            onNewVideo({ ...formData, id: res.id, rank: res.rank });\r\n            setIsLoading(false);\r\n            setPreviewVideo('');\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            await removeToFirebase({\r\n              fileName: formData.video_name,\r\n              folderUrl: `videos/courses/${courseId}`\r\n            })\r\n            alertMessage({ type: 'error', message: 'Tạo bài giảng thất bại' });\r\n            setIsLoading(false);\r\n            setPreviewVideo('');\r\n            reset();\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, courseId, onNewVideo, reset]);\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n\r\n    const form = { ...data };\r\n    delete form.video;\r\n\r\n    if (previewVideo === '') {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là video!' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    let videoName = `teacher-id-${user.id}-` + stringGenerate() + data.video[0].name;\r\n    const url = await uploadToFirebase({\r\n      file: data.video[0],\r\n      fileName: videoName,\r\n      folderUrl: `videos/courses/${courseId}`\r\n    });\r\n    if (url === null) {\r\n      alertMessage({ type: 'error', message: 'Tạo video bài giảng thất bại' });\r\n      setIsLoading(false);\r\n      setPreviewVideo('');\r\n      reset();\r\n      return;\r\n    }\r\n    form.url = url;\r\n    form.video_name = videoName;\r\n    form.courses_id = courseId;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Button variant=\"secondary\" className=\"btn-add-video\">\r\n        <i className=\"fa fa-video-camera\"></i> Thêm Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"outline-secondary\" className=\"btn-add-slide\" onClick={handleShowAddSlide}>\r\n        <i className=\"fa fa-file-pdf-o\"></i> Thêm Slide\r\n      </Button>\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-create\">\r\n        <Form.Group>\r\n          <Form.Label>Tên bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Video bài giảng</Form.Label><br />\r\n          <ReactPlayer url={previewVideo} width={225} height={125} className=\"previewVideo\" /><br />\r\n          <Form.File name=\"video\" onChange={handleChooseFile} ref={register} accept=\"video/*\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-create-lesson\" variant=\"outline-dark\">Thêm video</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddVideo;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditVideo\\index.jsx",["353"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ReactPlayer from 'react-player';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport {\r\n  stringGenerate,\r\n  removeToFirebase,\r\n  uploadToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\nimport { update } from '../../../../services/video';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\n\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên bài giảng'),\r\n  rank: yup.number().required('Bạn chưa nhập thứ tự của bài giảng')\r\n});\r\n\r\nconst EditVideo = ({ videoUpdate, courseId, user, onUpdateVideo, onShowEditSlide }) => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isChooseFile, setIsChooseFile] = useState(false);\r\n  const [previewVideo, setPreviewVideo] = useState(null);\r\n  const [video, setVideo] = useState({\r\n    name: '',\r\n  });\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setPreviewVideo(videoUpdate.url);\r\n    setVideo(videoUpdate);\r\n  }, [videoUpdate])\r\n\r\n  const handleChooseVideo = (e) => {\r\n    let file = e.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'video') {\r\n      return;\r\n    }\r\n    setPreviewVideo(URL.createObjectURL(file));\r\n    setIsChooseFile(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessError;\r\n        const res = await update(formData, videoUpdate.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: videoUpdate.video_name,\r\n                folderUrl: `videos/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật bài giảng thành công' });\r\n            }\r\n            onUpdateVideo({ ...formData, id: videoUpdate.id });\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: formData.video_name,\r\n                folderUrl: `videos/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError) {\r\n              alertMessage({ type: 'error', message: 'Đã có lỗi xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Cập nhật bài giảng thất bại' });\r\n            }\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, videoUpdate, courseId, isChooseFile, onUpdateVideo])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.video;\r\n\r\n    let videoName = `teacher-id-${user.id}-` + stringGenerate();\r\n    if (isChooseFile) {\r\n      videoName += data.video[0].name;\r\n      const url = await uploadToFirebase({\r\n        file: data.video[0],\r\n        fileName: videoName,\r\n        folderUrl: `videos/courses/${courseId}`\r\n      })\r\n      if (url === null) {\r\n        alertMessage({ type: 'error', message: 'Cập nhật video bài giảng thất bại' });\r\n        setIsLoading(false);\r\n        setIsChooseFile(false);\r\n        return;\r\n      }\r\n      form.url = url;\r\n      form.video_name = videoName;\r\n    } else {\r\n      form.url = videoUpdate.url;\r\n      form.video_name = videoUpdate.video_name;\r\n    }\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  const handleShowEditSlide = () => {\r\n    onShowEditSlide();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n\r\n      <Button variant=\"secondary\" className=\"btn-edit-video\">\r\n        <i className=\"fa fa-video-camera\"></i> Chỉnh sửa Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"outline-secondary\" className=\"btn-edit-slide\" onClick={handleShowEditSlide}>\r\n        <i className=\"fa fa-file-pdf-o\"></i> Chỉnh sửa Slide\r\n      </Button>\r\n\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-edit\">\r\n        <Form.Group>\r\n          <Form.Label>Tên bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" defaultValue={video.name} name=\"name\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Thứ tự</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"number\" defaultValue={video.rank} name=\"rank\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.rank?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Video bài giảng</Form.Label><br />\r\n          <ReactPlayer url={previewVideo} width={225} height={125} /><br />\r\n          <Form.File name=\"video\" ref={register} onChange={handleChooseVideo} accept=\"video/*\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-edit-lesson\" variant=\"outline-dark\">Chỉnh sửa</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditVideo;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddSlide\\index.jsx",["354"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport './index.css';\r\nimport { create } from '../../../../services/slide';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên bài giảng')\r\n});\r\n\r\nconst AddSlide = ({ courseId, user, onNewSlide, onShowAddVideo }) => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewPdf, setPreviewPdf] = useState('');\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  const handleShowAddVideo = () => {\r\n    onShowAddVideo();\r\n  }\r\n\r\n  const handleChooseFile = (event) => {\r\n    let file = event.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[1] : null;\r\n    if (type !== 'pdf') {\r\n      setPreviewPdf('');\r\n      return;\r\n    }\r\n    setPreviewPdf(URL.createObjectURL(file));\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await create(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Tạo slide bài giảng thành công' });\r\n            onNewSlide({ ...formData, id: res.id });\r\n            setIsLoading(false);\r\n            setPreviewPdf('');\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            await removeToFirebase({\r\n              fileName: formData.slide_name,\r\n              folderUrl: `slides/courses/${courseId}`\r\n            });\r\n            alertMessage({ type: 'error', message: 'Tạo slide bài giảng thất bại' });\r\n            setIsLoading(false);\r\n            setPreviewPdf('');\r\n            reset();\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, courseId, onNewSlide, reset])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.slide;\r\n\r\n    if (previewPdf === '') {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là pdf' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    let slideName = `teacher-id-${user.id}-` + stringGenerate() + data.slide[0].name;\r\n    const url = await uploadToFirebase({\r\n      file: data.slide[0],\r\n      fileName: slideName,\r\n      folderUrl: `slides/courses/${courseId}`\r\n    })\r\n    if (url === null) {\r\n      alertMessage({ type: 'error', message: 'Tạo slide bài giảng thất bại' });\r\n      setIsLoading(false);\r\n      setPreviewPdf('');\r\n      reset();\r\n      return;\r\n    }\r\n    form.url = url;\r\n    form.slide_name = slideName;\r\n    form.courses_id = courseId;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Button variant=\"outline-secondary\" className=\"btn-add-video\" onClick={handleShowAddVideo} >\r\n        <i className=\"fa fa-video-camera\"></i> Thêm Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"secondary\" className=\"btn-add-slide\">\r\n        <i className=\"fa fa-file-pdf-o\"></i> Thêm Slide\r\n      </Button>\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-create-slide\">\r\n        <Form.Group>\r\n          <Form.Label>Tên slide bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Nhập tên slide bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Slide bài giảng (.pdf)</Form.Label><br />\r\n          <embed width=\"191\" height=\"207\" src={previewPdf} type=\"application/pdf\" className=\"preview\"></embed>\r\n          <Form.File name=\"slide\" onChange={handleChooseFile} ref={register} accept=\"application/pdf\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-create-slide\" variant=\"outline-dark\">Thêm slide</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddSlide;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditSlide\\index.jsx",["355"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport {\r\n  stringGenerate,\r\n  alertMessage,\r\n  uploadToFirebase,\r\n  removeToFirebase\r\n} from '../../../../utils/common';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\n\r\nimport './index.css'\r\nimport { update } from '../../../../services/slide';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên slide bài giảng')\r\n});\r\n\r\nconst EditSlide = ({ courseId, slideUpdate, user, onShowEditVideo, onUpdateSlide }) => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isChooseFile, setIsChooseFile] = useState(false);\r\n  const [previewSlide, setPreviewSlide] = useState(null);\r\n  const [slide, setSlide] = useState({\r\n    name: ''\r\n  });\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setPreviewSlide(slideUpdate.url);\r\n    setSlide(slideUpdate);\r\n  }, [slideUpdate])\r\n\r\n  const handleShowEditVideo = () => {\r\n    onShowEditVideo();\r\n  }\r\n\r\n\r\n  const handleChooseFile = (event) => {\r\n    let file = event.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[1] : null;\r\n    if (type !== 'pdf') {\r\n      return;\r\n    }\r\n    setPreviewSlide(URL.createObjectURL(file));\r\n    setIsChooseFile(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessError;\r\n        const res = await update(formData, slideUpdate.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: slideUpdate.slide_name,\r\n                folderUrl: `slides/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật thành công.' });\r\n            }\r\n            onUpdateSlide({ ...formData, id: slideUpdate.id });\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: formData.slide_name,\r\n                folderUrl: `slides/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'error', message: 'Đã có lỗi xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Cập nhật thất bại.' });\r\n            }\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, slideUpdate, courseId, isChooseFile, onUpdateSlide])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n\r\n    const form = { ...data };\r\n    delete form.slide;\r\n\r\n    let slideName = `teacher-id-${user.id}-` + stringGenerate();\r\n    if (isChooseFile) {\r\n      slideName += data.slide[0].name;\r\n      const url = await uploadToFirebase({\r\n        file: data.slide[0],\r\n        fileName: slideName,\r\n        folderUrl: `slides/courses/${courseId}`\r\n      })\r\n      if (url === null) {\r\n        alertMessage({ type: 'error', message: 'Cập nhật slide bài giảng thất bại' });\r\n        setIsLoading(false);\r\n        setIsChooseFile(false);\r\n        return;\r\n      }\r\n      form.url = url;\r\n      form.slide_name = slideName;\r\n    } else {\r\n      form.url = slideUpdate.url;\r\n      form.slide_name = slideUpdate.slide_name;\r\n    }\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Button variant=\"outline-secondary\" className=\"btn-edit-video\" onClick={handleShowEditVideo} >\r\n        <i className=\"fa fa-video-camera\"></i> Chỉnh sửa Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"secondary\" className=\"btn-edit-slide\">\r\n        <i className=\"fa fa-file-pdf-o\"></i> Chỉnh sửa Slide\r\n      </Button>\r\n\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-edit-slide\">\r\n        <Form.Group>\r\n          <Form.Label>Tên slide bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" defaultValue={slide.name} name=\"name\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Slide bài giảng</Form.Label><br />\r\n          <embed width=\"191\" height=\"207\" src={previewSlide} type=\"application/pdf\" className=\"preview\"></embed>\r\n          <Form.File name=\"slide\" onChange={handleChooseFile} ref={register} accept=\"application/pdf\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-submit-edit-slide\" variant=\"outline-dark\">Chỉnh sửa</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditSlide;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListVideo\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListSlide\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\SlideThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\slide.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Edit\\index.jsx",["356","357","358"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Select from 'react-select';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { getUser } from '../../../../services/user';\r\nimport { getInitCategories } from '../../../../services/category';\r\nimport { coursesOfTeacher, getCourseOfTeacherById, update, deleteCourse } from '../../../../services/course';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport Swal from 'sweetalert2';\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Bạn chưa nhập tiêu đề khóa học'),\r\n  name: yup.string().required('Bạn chưa nhập tên khóa học'),\r\n  sort_desc: yup.string().required('Bạn chưa nhập mô tả')\r\n});\r\n\r\nconst Edit = () => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isChooseCourse, setIsChooseCourse] = useState(false);\r\n  const [course, setCourse] = useState([]);\r\n  const optStatus = [\r\n    { value: 'completed', label: 'Hoàn thành' },\r\n    { value: 'pending', label: 'Chưa hoàn thành' }\r\n  ];\r\n  const [selectedStatus, setSelectedStatus] = useState({ value: null, label: null });\r\n\r\n  const [optCourses, setOptCourses] = useState([]);\r\n  const [selectedCourse, setSelectedCourse] = useState({ value: null, label: 'Chọn khóa học ...' });\r\n\r\n  const [optCategories, setOptCategories] = useState([]);\r\n  const [selectedCategories, setSelectedCategories] = useState({ value: null, label: null });\r\n\r\n  const [isChooseImgLarge, setIsChooseImgLarge] = useState(false);\r\n  const [isChooseImgSmall, setIsChooseImgSmall] = useState(false);\r\n  const [previewImgLarge, setPreviewImgLarge] = useState('');\r\n  const [previewImgSmall, setPreviewImgSmall] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [user, setUser] = useState({\r\n    id: null,\r\n    name: null,\r\n  });\r\n\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const [isDelete, setIsDelete] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      let res = await getUser();\r\n      if (res.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n      } else {\r\n        setUser(res);\r\n      }\r\n    }\r\n\r\n    const fetchCourses = async () => {\r\n      let result = await coursesOfTeacher();\r\n      if (result.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      let initial = [];\r\n      let remap = result.reduce((accumulator, currentValue) => {\r\n        accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n        return accumulator;\r\n      }, initial);\r\n      setOptCourses(remap)\r\n    }\r\n\r\n    const fetchCategories = async () => {\r\n      let result = await getInitCategories();\r\n      let initial = [];\r\n      let remap = result.reduce((accumulator, currentValue) => {\r\n        accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n        return accumulator;\r\n      }, initial);\r\n      setOptCategories(remap);\r\n    }\r\n\r\n    fetchUser();\r\n    fetchCourses();\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const handleFile = (file) => {\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'image') {\r\n      return null;\r\n    }\r\n    let path = URL.createObjectURL(file);\r\n    return path;\r\n  }\r\n\r\n  const handleChooseImaSmall = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n    } else {\r\n      setIsChooseImgSmall(true);\r\n      setPreviewImgSmall(path);\r\n    }\r\n  }\r\n\r\n  const handleChooseImaLarge = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n    } else {\r\n      setIsChooseImgLarge(true);\r\n      setPreviewImgLarge(path);\r\n    }\r\n  }\r\n\r\n  const handleSelectChangeCourse = async (selected) => {\r\n    setIsChooseCourse(true);\r\n    setSelectedCourse(selected);\r\n    let res = await getCourseOfTeacherById(selected.value);\r\n    if (res.authenticated === false) {\r\n      dispatch({\r\n        type: LOGOUT,\r\n        payload: {\r\n          isLogged: false\r\n        }\r\n      });\r\n      return;\r\n    }\r\n    setCourse(res);\r\n    let category = optCategories.filter(cat => cat.value === res.categories_id);\r\n    setSelectedCategories(category[0]);\r\n    setDescription(res.detail_desc);\r\n    setPreviewImgSmall(res.img);\r\n    setPreviewImgLarge(res.img_large);\r\n    let tus = optStatus.filter(sts => sts.value === res.status);\r\n    setSelectedStatus(tus[0]);\r\n  }\r\n\r\n  const handleSelectChangeCategories = (selected) => {\r\n    setSelectedCategories(selected);\r\n  }\r\n\r\n  const handleSelectChangeStatus = (selected) => {\r\n    setSelectedStatus(selected);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessErrorSmall, isProcessErrorLarge;\r\n        let res = await update(formData, course.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            if (isChooseImgSmall) {\r\n              isProcessErrorSmall = await removeToFirebase({\r\n                fileName: course.img_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgSmall(false);\r\n            }\r\n            if (isChooseImgLarge) {\r\n              isProcessErrorLarge = await removeToFirebase({\r\n                fileName: course.img_large_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgLarge(false);\r\n            }\r\n            if (isProcessErrorSmall === null || isProcessErrorLarge === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật thành công.' });\r\n            }\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            if (isChooseImgSmall) {\r\n              isProcessErrorSmall = await removeToFirebase({\r\n                fileName: formData.img_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgSmall(false);\r\n            }\r\n            if (isChooseImgLarge) {\r\n              isProcessErrorLarge = await removeToFirebase({\r\n                fileName: formData.img_large_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgLarge(false);\r\n            }\r\n            if (isProcessErrorSmall === null || isProcessErrorLarge === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Cập nhật thất bại.' });\r\n            }\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, course, user, isChooseImgSmall, isChooseImgLarge])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.large_image;\r\n    delete form.small_image;\r\n\r\n    let imgName = stringGenerate();\r\n    let imgLargeName = stringGenerate();\r\n    if (isChooseImgSmall) {\r\n      imgName += data.small_image[0].name;\r\n      let url = await uploadToFirebase({\r\n        file: data.small_image[0],\r\n        fileName: imgName,\r\n        folderUrl: `images/courses/teacher-id-${user.id}`\r\n      });\r\n      if (url === null) {\r\n        alertMessage({ type: 'warning', message: 'Có lỗi xảy ra trong quá trình cập nhật!' });\r\n        setIsChooseImgSmall(false);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      form.img = url;\r\n      form.img_name = imgName;\r\n    }\r\n\r\n    if (isChooseImgLarge) {\r\n      imgLargeName += data.large_image[0].name;\r\n      let url = await uploadToFirebase({\r\n        file: data.large_image[0],\r\n        fileName: imgLargeName,\r\n        folderUrl: `images/courses/teacher-id-${user.id}`\r\n      });\r\n      if (url === null) {\r\n        alertMessage({ type: 'warning', message: 'Có lỗi xảy ra trong quá trình cập nhật!' });\r\n        setIsChooseImgLarge(false);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      form.img_large = url;\r\n      form.img_large_name = imgLargeName;\r\n    }\r\n\r\n    form.detail_desc = description;\r\n    form.status = selectedStatus.value;\r\n    form.categories_id = selectedCategories.value;\r\n    form.price = +data.price;\r\n    form.price_promo = +data.price_promo;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  const onRemoveCourse_clicked = async () => {\r\n    let resToast = await Swal.fire({\r\n      title: 'Bạn có muốn xóa khóa học này ?',\r\n      showCancelButton: true,\r\n      confirmButtonText: `Xóa`,\r\n    });\r\n\r\n    if (resToast.isConfirmed) {\r\n      setIsLoading(true);\r\n      setIsDelete(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isDelete) {\r\n      const actionDelete = async () => {\r\n        let res = await deleteCourse(course.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            await removeToFirebase({\r\n              fileName: res.course.img_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            await removeToFirebase({\r\n              fileName: res.course.img_large_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            if (res.videos.length > 0) {\r\n              res.videos.map(async (video) => {\r\n                await removeToFirebase({\r\n                  fileName: video.video_name,\r\n                  folderUrl: `videos/courses/${course.id}`\r\n                })\r\n              });\r\n            }\r\n            if (res.slides.length > 0) {\r\n              res.slides.map(async (slide) => {\r\n                await removeToFirebase({\r\n                  fileName: slide.slide_name,\r\n                  folderUrl: `slides/courses/${course.id}`\r\n                })\r\n              });\r\n            }\r\n            alertMessage({ type: 'success', message: 'Xóa khóa học thành công.' });\r\n            setIsDelete(false);\r\n            setIsLoading(false);\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Không thể xóa khóa học này.' });\r\n            setIsDelete(false);\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionDelete();\r\n    }\r\n    return () => mounted = false;\r\n\r\n  }, [isDelete, course, user]);\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={9} xs={12} className=\"col-form-edit\">\r\n            <Form.Group>\r\n              <Form.Label>Khóa học</Form.Label>\r\n              <Select\r\n                value={selectedCourse}\r\n                onChange={handleSelectChangeCourse}\r\n                isClearable={false}\r\n                isSearchable={true}\r\n                options={optCourses}\r\n              />\r\n            </Form.Group>\r\n\r\n            {isChooseCourse &&\r\n              <>\r\n                <Form.Group>\r\n                  <Form.Label>Trạng thái</Form.Label>\r\n                  <Select\r\n                    value={selectedStatus}\r\n                    onChange={handleSelectChangeStatus}\r\n                    isClearable={false}\r\n                    isSearchable={true}\r\n                    options={optStatus}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Lĩnh vực</Form.Label>\r\n                  <Select\r\n                    value={selectedCategories}\r\n                    onChange={handleSelectChangeCategories}\r\n                    isClearable={false}\r\n                    isSearchable={true}\r\n                    options={optCategories}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Tiêu đề</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"text\" name=\"title\" defaultValue={course.title} ref={register} placeholder=\"Nhập tiêu đề\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.title?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Tên khóa học</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"text\" name=\"name\" defaultValue={course.name} ref={register} placeholder=\"Nhập tên khóa học\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.name?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                  <Form.Label>Mô tả ngắn</Form.Label>\r\n                  <Form.Control as=\"textarea\" name=\"sort_desc\" defaultValue={course.sort_desc} ref={register} rows={3} />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.sort_desc?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Mô tả chi tiết</Form.Label>\r\n                  <ReactQuill\r\n                    theme=\"snow\"\r\n                    name=\"detail_desc\"\r\n                    style={{ height: '200px', marginBottom: '35px' }}\r\n                    value={description}\r\n                    onChange={setDescription}\r\n                    ref={register} />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.detail_desc?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Ảnh nhỏ</Form.Label><br />\r\n                  <Image className=\"avatar\" src={previewImgSmall} roundedCircle />\r\n                  <Form.File name=\"small_image\" onChange={handleChooseImaSmall} ref={register} accept=\"image/*\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Ảnh lớn</Form.Label><br />\r\n                  <Image className=\"avatar\" src={previewImgLarge} roundedCircle />\r\n                  <Form.File name=\"large_image\" onChange={handleChooseImaLarge} ref={register} accept=\"image/*\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Giá</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"number\" name=\"price\" defaultValue={course.price} ref={register} placeholder=\"Nhập giá khóa học\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.price?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Giá khuyến mãi (nếu có)</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"number\" name=\"price_promo\" defaultValue={course.price_promo} ref={register} placeholder=\"Nhập giá khóa học\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.price_promo?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Button type=\"submit\" className=\"btn-edit\" variant=\"outline-dark\">Chỉnh sửa khóa học</Button>\r\n              </>\r\n            }\r\n          </Col>\r\n          <Col lg={3} xs={12} className=\"col-btn-remove\">\r\n            {(course.qty_student_registed === 0 || course.qty_student_registed === null) && isChooseCourse &&\r\n              <Button className=\"btn-remove\" variant=\"outline-danger\" onClick={onRemoveCourse_clicked}>\r\n                <i className=\"fa fa-trash\"></i> Xóa khóa học\r\n              </Button>\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Edit;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListVideo\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListSlide\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\SlideThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Slide\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\lovelist.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Comment\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\feedback.js",[],{"ruleId":"359","replacedBy":"360"},{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","severity":1,"message":"364","line":35,"column":6,"nodeType":"365","endLine":35,"endColumn":8,"suggestions":"366"},{"ruleId":"359","replacedBy":"367"},{"ruleId":"361","replacedBy":"368"},{"ruleId":"363","severity":1,"message":"364","line":38,"column":6,"nodeType":"365","endLine":38,"endColumn":28,"suggestions":"369"},{"ruleId":"363","severity":1,"message":"364","line":30,"column":6,"nodeType":"365","endLine":30,"endColumn":8,"suggestions":"370"},{"ruleId":"363","severity":1,"message":"371","line":42,"column":6,"nodeType":"365","endLine":42,"endColumn":8,"suggestions":"372"},{"ruleId":"363","severity":1,"message":"373","line":58,"column":6,"nodeType":"365","endLine":58,"endColumn":21,"suggestions":"374"},{"ruleId":"363","severity":1,"message":"375","line":11,"column":6,"nodeType":"365","endLine":11,"endColumn":42,"suggestions":"376"},{"ruleId":"363","severity":1,"message":"364","line":69,"column":6,"nodeType":"365","endLine":69,"endColumn":8,"suggestions":"377"},{"ruleId":"363","severity":1,"message":"364","line":124,"column":6,"nodeType":"365","endLine":124,"endColumn":41,"suggestions":"378"},{"ruleId":"363","severity":1,"message":"364","line":72,"column":6,"nodeType":"365","endLine":72,"endColumn":33,"suggestions":"379"},{"ruleId":"363","severity":1,"message":"364","line":56,"column":6,"nodeType":"365","endLine":56,"endColumn":8,"suggestions":"380"},{"ruleId":"363","severity":1,"message":"364","line":86,"column":6,"nodeType":"365","endLine":86,"endColumn":40,"suggestions":"381"},{"ruleId":"363","severity":1,"message":"364","line":120,"column":6,"nodeType":"365","endLine":120,"endColumn":40,"suggestions":"382"},{"ruleId":"363","severity":1,"message":"364","line":60,"column":6,"nodeType":"365","endLine":60,"endColumn":35,"suggestions":"383"},{"ruleId":"363","severity":1,"message":"384","line":57,"column":6,"nodeType":"365","endLine":57,"endColumn":8,"suggestions":"385"},{"ruleId":"363","severity":1,"message":"364","line":79,"column":6,"nodeType":"365","endLine":79,"endColumn":8,"suggestions":"386"},{"ruleId":"363","severity":1,"message":"364","line":125,"column":6,"nodeType":"365","endLine":125,"endColumn":39,"suggestions":"387"},{"ruleId":"363","severity":1,"message":"364","line":75,"column":6,"nodeType":"365","endLine":75,"endColumn":8,"suggestions":"388"},{"ruleId":"363","severity":1,"message":"364","line":91,"column":6,"nodeType":"365","endLine":91,"endColumn":55,"suggestions":"389"},{"ruleId":"363","severity":1,"message":"364","line":111,"column":6,"nodeType":"365","endLine":111,"endColumn":78,"suggestions":"390"},{"ruleId":"363","severity":1,"message":"364","line":89,"column":6,"nodeType":"365","endLine":89,"endColumn":55,"suggestions":"391"},{"ruleId":"363","severity":1,"message":"364","line":114,"column":6,"nodeType":"365","endLine":114,"endColumn":78,"suggestions":"392"},{"ruleId":"363","severity":1,"message":"364","line":120,"column":6,"nodeType":"365","endLine":120,"endColumn":8,"suggestions":"393"},{"ruleId":"363","severity":1,"message":"364","line":249,"column":6,"nodeType":"365","endLine":249,"endColumn":76,"suggestions":"394"},{"ruleId":"363","severity":1,"message":"364","line":369,"column":6,"nodeType":"365","endLine":369,"endColumn":30,"suggestions":"395"},"no-native-reassign",["396"],"no-negated-in-lhs",["397"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["398"],["396"],["397"],["399"],["400"],"React Hook useEffect has missing dependencies: 'courseId', 'from', and 'history'. Either include them or remove the dependency array.",["401"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["402"],"React Hook useEffect has a missing dependency: 'forcePage'. Either include it or remove the dependency array.",["403"],["404"],["405"],["406"],["407"],["408"],["409"],["410"],"React Hook useEffect has missing dependencies: 'courseId', 'dispatch', and 'history'. Either include them or remove the dependency array.",["411"],["412"],["413"],["414"],["415"],["416"],["417"],["418"],["419"],["420"],["421"],"no-global-assign","no-unsafe-negation",{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},{"desc":"422","fix":"426"},{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"422","fix":"433"},{"desc":"434","fix":"435"},{"desc":"436","fix":"437"},{"desc":"422","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"422","fix":"447"},{"desc":"448","fix":"449"},{"desc":"422","fix":"450"},{"desc":"451","fix":"452"},{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"422","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},"Update the dependencies array to be: [dispatch]",{"range":"464","text":"465"},"Update the dependencies array to be: [dispatch, store.isSearchAction]",{"range":"466","text":"467"},{"range":"468","text":"465"},"Update the dependencies array to be: [courseId, from, history]",{"range":"469","text":"470"},"Update the dependencies array to be: [isBuy, course, dispatch, history]",{"range":"471","text":"472"},"Update the dependencies array to be: [paginate.uri, paginate.currentPage, forcePage]",{"range":"473","text":"474"},{"range":"475","text":"465"},"Update the dependencies array to be: [isSubmit, setUser, user, formData, dispatch]",{"range":"476","text":"477"},"Update the dependencies array to be: [isSubmit, formData, reset, dispatch]",{"range":"478","text":"479"},{"range":"480","text":"465"},"Update the dependencies array to be: [isAdd, userCourseStarId, loveIds, dispatch]",{"range":"481","text":"482"},"Update the dependencies array to be: [isSub, userCourseStarId, loveIds, dispatch]",{"range":"483","text":"484"},"Update the dependencies array to be: [isFeedback, feedbackContent, dispatch]",{"range":"485","text":"486"},"Update the dependencies array to be: [courseId, dispatch, history]",{"range":"487","text":"488"},{"range":"489","text":"465"},"Update the dependencies array to be: [isSubmit, formData, reset, user, dispatch]",{"range":"490","text":"491"},{"range":"492","text":"465"},"Update the dependencies array to be: [isSubmit, formData, courseId, onNewVideo, reset, dispatch]",{"range":"493","text":"494"},"Update the dependencies array to be: [isSubmit, formData, videoUpdate, courseId, isChooseFile, onUpdateVideo, dispatch]",{"range":"495","text":"496"},"Update the dependencies array to be: [isSubmit, formData, courseId, onNewSlide, reset, dispatch]",{"range":"497","text":"498"},"Update the dependencies array to be: [isSubmit, formData, slideUpdate, courseId, isChooseFile, onUpdateSlide, dispatch]",{"range":"499","text":"500"},{"range":"501","text":"465"},"Update the dependencies array to be: [isSubmit, formData, course, user, isChooseImgSmall, isChooseImgLarge, dispatch]",{"range":"502","text":"503"},"Update the dependencies array to be: [isDelete, course, user, dispatch]",{"range":"504","text":"505"},[915,917],"[dispatch]",[1059,1081],"[dispatch, store.isSearchAction]",[807,809],[1451,1453],"[courseId, from, history]",[1877,1892],"[isBuy, course, dispatch, history]",[336,372],"[paginate.uri, paginate.currentPage, forcePage]",[1985,1987],[3770,3805],"[isSubmit, setUser, user, formData, dispatch]",[2394,2421],"[isSubmit, formData, reset, dispatch]",[1647,1649],[2554,2588],"[isAdd, userCourseStarId, loveIds, dispatch]",[3579,3613],"[isSub, userCourseStarId, loveIds, dispatch]",[1945,1974],"[isFeedback, feedbackContent, dispatch]",[1908,1910],"[courseId, dispatch, history]",[2594,2596],[4009,4042],"[isSubmit, formData, reset, user, dispatch]",[2520,2522],[2789,2838],"[isSubmit, formData, courseId, onNewVideo, reset, dispatch]",[3729,3801],"[isSubmit, formData, videoUpdate, courseId, isChooseFile, onUpdateVideo, dispatch]",[2737,2786],"[isSubmit, formData, courseId, onNewSlide, reset, dispatch]",[3690,3762],"[isSubmit, formData, slideUpdate, courseId, isChooseFile, onUpdateSlide, dispatch]",[4070,4072],[8362,8432],"[isSubmit, formData, course, user, isChooseImgSmall, isChooseImgLarge, dispatch]",[12146,12170],"[isDelete, course, user, dispatch]"]