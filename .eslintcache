[{"F:\\Git\\WNC\\onlacademy-react\\src\\index.js":"1","F:\\Git\\WNC\\onlacademy-react\\src\\App.js":"2","F:\\Git\\WNC\\onlacademy-react\\src\\reportWebVitals.js":"3","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\index.jsx":"4","F:\\Git\\WNC\\onlacademy-react\\src\\AppReducer.js":"5","F:\\Git\\WNC\\onlacademy-react\\src\\AppContext.js":"6","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavSearch.jsx":"7","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavHead.jsx":"8","F:\\Git\\WNC\\onlacademy-react\\src\\services\\course.js":"9","F:\\Git\\WNC\\onlacademy-react\\src\\AppTypes.js":"10","F:\\Git\\WNC\\onlacademy-react\\src\\services\\category.js":"11","F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Default\\index.jsx":"12","F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Admin\\index.jsx":"13","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\index.jsx":"14","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\Course\\index.jsx":"15","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Login\\index.jsx":"16","F:\\Git\\WNC\\onlacademy-react\\src\\services\\auth.js":"17","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\makeAPI.js":"18","F:\\Git\\WNC\\onlacademy-react\\src\\AppState.js":"19","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\index.jsx":"20","F:\\Git\\WNC\\onlacademy-react\\src\\components\\PrivateRoute\\index.jsx":"21","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Register\\index.jsx":"22","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\index.jsx":"23","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\index.jsx":"24","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavMenuItem.jsx":"25","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\index.jsx":"26","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\format.js":"27","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\MenuFilter\\index.jsx":"28","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\ItemFilter\\index.jsx":"29","F:\\Git\\WNC\\onlacademy-react\\src\\services\\search.js":"30","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\ModalVideo\\index.jsx":"31","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\MainImage\\index.jsx":"32","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Detail\\index.jsx":"33","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Recommend\\index.jsx":"34","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Feedbback\\index.jsx":"35","F:\\Git\\WNC\\onlacademy-react\\src\\services\\common.js":"36","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Paginate\\index.jsx":"37","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Menu\\index.jsx":"38","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ItemMenu\\index.jsx":"39","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Info\\index.jsx":"40","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ChangePassword\\index.jsx":"41","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Content\\index.jsx":"42","F:\\Git\\WNC\\onlacademy-react\\src\\services\\user.js":"43","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\components\\Content\\index.jsx":"44","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\firebase.js":"45","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Loading\\index.jsx":"46","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\RegisteredCourses\\index.jsx":"47","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Course\\index.jsx":"48","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\index.jsx":"49","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Video\\index.jsx":"50","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\BreadCrumb\\index.jsx":"51","F:\\Git\\WNC\\onlacademy-react\\src\\services\\video.js":"52","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Footer\\index.jsx":"53","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\index.jsx":"54","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Content\\index.jsx":"55","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Menu\\index.jsx":"56","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\ItemMenu\\index.jsx":"57","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Add\\index.jsx":"58","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Lesson\\index.jsx":"59","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\VideoThumbnail\\index.jsx":"60","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\VideoThumbnail\\index.jsx":"61","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\common.js":"62","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddVideo\\index.jsx":"63","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditVideo\\index.jsx":"64","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddSlide\\index.jsx":"65","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditSlide\\index.jsx":"66","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListVideo\\index.jsx":"67","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListSlide\\index.jsx":"68","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\SlideThumbnail\\index.jsx":"69","F:\\Git\\WNC\\onlacademy-react\\src\\services\\slide.js":"70","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Edit\\index.jsx":"71","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListVideo\\index.jsx":"72","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListSlide\\index.jsx":"73","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\SlideThumbnail\\index.jsx":"74","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Slide\\index.jsx":"75","F:\\Git\\WNC\\onlacademy-react\\src\\services\\lovelist.js":"76","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Comment\\index.jsx":"77","F:\\Git\\WNC\\onlacademy-react\\src\\services\\feedback.js":"78","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\RecommendItem\\index.jsx":"79","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\components\\Menu\\index.jsx":"80","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\components\\Content\\index.jsx":"81","F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\components\\ItemMenu\\index.jsx":"82","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Students\\index.jsx":"83","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Teachers\\index.jsx":"84","F:\\Git\\WNC\\onlacademy-react\\src\\services\\admin.js":"85","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Courses\\index.jsx":"86","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\CreateTeacher\\index.jsx":"87","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Categories\\index.jsx":"88","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\CreateCategory\\index.jsx":"89","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\LoveList\\index.jsx":"90"},{"size":500,"mtime":499162500000,"results":"91","hashOfConfig":"92"},{"size":1315,"mtime":1613822044125,"results":"93","hashOfConfig":"92"},{"size":362,"mtime":499162500000,"results":"94","hashOfConfig":"92"},{"size":468,"mtime":1613534288088,"results":"95","hashOfConfig":"92"},{"size":951,"mtime":1613544527670,"results":"96","hashOfConfig":"92"},{"size":145,"mtime":1609934933541,"results":"97","hashOfConfig":"92"},{"size":1569,"mtime":1615034333594,"results":"98","hashOfConfig":"92"},{"size":3472,"mtime":1613824539673,"results":"99","hashOfConfig":"92"},{"size":3372,"mtime":1615725437451,"results":"100","hashOfConfig":"92"},{"size":520,"mtime":1613823401646,"results":"101","hashOfConfig":"92"},{"size":248,"mtime":1613703156964,"results":"102","hashOfConfig":"92"},{"size":1135,"mtime":1610594868743,"results":"103","hashOfConfig":"92"},{"size":343,"mtime":1610531738490,"results":"104","hashOfConfig":"92"},{"size":1850,"mtime":1615088219184,"results":"105","hashOfConfig":"92"},{"size":1649,"mtime":1613729242494,"results":"106","hashOfConfig":"92"},{"size":5154,"mtime":1615686556704,"results":"107","hashOfConfig":"92"},{"size":1854,"mtime":1613702388285,"results":"108","hashOfConfig":"92"},{"size":1923,"mtime":1613659629146,"results":"109","hashOfConfig":"92"},{"size":426,"mtime":1613544527672,"results":"110","hashOfConfig":"92"},{"size":361,"mtime":1612174840582,"results":"111","hashOfConfig":"92"},{"size":563,"mtime":1613459719962,"results":"112","hashOfConfig":"92"},{"size":4364,"mtime":1615043705409,"results":"113","hashOfConfig":"92"},{"size":746,"mtime":1613905863904,"results":"114","hashOfConfig":"92"},{"size":1027,"mtime":1613703195403,"results":"115","hashOfConfig":"92"},{"size":1184,"mtime":1612229723555,"results":"116","hashOfConfig":"92"},{"size":2404,"mtime":1613730212336,"results":"117","hashOfConfig":"92"},{"size":445,"mtime":1612233285761,"results":"118","hashOfConfig":"92"},{"size":2018,"mtime":1613544527675,"results":"119","hashOfConfig":"92"},{"size":415,"mtime":1611477296357,"results":"120","hashOfConfig":"92"},{"size":380,"mtime":1615801759311,"results":"121","hashOfConfig":"92"},{"size":873,"mtime":1612324376713,"results":"122","hashOfConfig":"92"},{"size":214,"mtime":1615792363764,"results":"123","hashOfConfig":"92"},{"size":3897,"mtime":1615091335543,"results":"124","hashOfConfig":"92"},{"size":463,"mtime":1615801183478,"results":"125","hashOfConfig":"92"},{"size":664,"mtime":1613577591286,"results":"126","hashOfConfig":"92"},{"size":277,"mtime":1611715877186,"results":"127","hashOfConfig":"92"},{"size":1347,"mtime":1611893581743,"results":"128","hashOfConfig":"92"},{"size":1966,"mtime":1615632416313,"results":"129","hashOfConfig":"92"},{"size":588,"mtime":1612063163627,"results":"130","hashOfConfig":"92"},{"size":7380,"mtime":1615629158351,"results":"131","hashOfConfig":"92"},{"size":4895,"mtime":1615085280765,"results":"132","hashOfConfig":"92"},{"size":1006,"mtime":1615637924726,"results":"133","hashOfConfig":"92"},{"size":639,"mtime":1613904471879,"results":"134","hashOfConfig":"92"},{"size":943,"mtime":1613458221582,"results":"135","hashOfConfig":"92"},{"size":662,"mtime":1612165114280,"results":"136","hashOfConfig":"92"},{"size":292,"mtime":1612179811689,"results":"137","hashOfConfig":"92"},{"size":4432,"mtime":1613660834773,"results":"138","hashOfConfig":"92"},{"size":4641,"mtime":1613734339930,"results":"139","hashOfConfig":"92"},{"size":4063,"mtime":1613459672688,"results":"140","hashOfConfig":"92"},{"size":525,"mtime":1613632950673,"results":"141","hashOfConfig":"92"},{"size":516,"mtime":1612321365767,"results":"142","hashOfConfig":"92"},{"size":1409,"mtime":1613700428442,"results":"143","hashOfConfig":"92"},{"size":1091,"mtime":1615640886087,"results":"144","hashOfConfig":"92"},{"size":749,"mtime":1612409258267,"results":"145","hashOfConfig":"92"},{"size":1175,"mtime":1613190700043,"results":"146","hashOfConfig":"92"},{"size":1447,"mtime":1613190897969,"results":"147","hashOfConfig":"92"},{"size":430,"mtime":1612407539596,"results":"148","hashOfConfig":"92"},{"size":10450,"mtime":1615627496075,"results":"149","hashOfConfig":"92"},{"size":7273,"mtime":1613720880806,"results":"150","hashOfConfig":"92"},{"size":598,"mtime":1613095886776,"results":"151","hashOfConfig":"92"},{"size":1705,"mtime":1613648269454,"results":"152","hashOfConfig":"92"},{"size":1001,"mtime":1613031700512,"results":"153","hashOfConfig":"92"},{"size":5052,"mtime":1613661570523,"results":"154","hashOfConfig":"92"},{"size":6489,"mtime":1613475772022,"results":"155","hashOfConfig":"92"},{"size":5027,"mtime":1613661462710,"results":"156","hashOfConfig":"92"},{"size":6042,"mtime":1613662410753,"results":"157","hashOfConfig":"92"},{"size":569,"mtime":1613059087563,"results":"158","hashOfConfig":"92"},{"size":575,"mtime":1613113380888,"results":"159","hashOfConfig":"92"},{"size":586,"mtime":1613115949717,"results":"160","hashOfConfig":"92"},{"size":781,"mtime":1613662378782,"results":"161","hashOfConfig":"92"},{"size":18203,"mtime":1615628840842,"results":"162","hashOfConfig":"92"},{"size":572,"mtime":1613312907114,"results":"163","hashOfConfig":"92"},{"size":572,"mtime":1613311613421,"results":"164","hashOfConfig":"92"},{"size":760,"mtime":1613312775981,"results":"165","hashOfConfig":"92"},{"size":433,"mtime":1613312533401,"results":"166","hashOfConfig":"92"},{"size":734,"mtime":1613660792645,"results":"167","hashOfConfig":"92"},{"size":487,"mtime":1613577591285,"results":"168","hashOfConfig":"92"},{"size":251,"mtime":1613660916787,"results":"169","hashOfConfig":"92"},{"size":1501,"mtime":1615792366486,"results":"170","hashOfConfig":"92"},{"size":2061,"mtime":1615131686419,"results":"171","hashOfConfig":"92"},{"size":1771,"mtime":1615131745774,"results":"172","hashOfConfig":"92"},{"size":430,"mtime":1613823675386,"results":"173","hashOfConfig":"92"},{"size":5002,"mtime":1615129689430,"results":"174","hashOfConfig":"92"},{"size":5119,"mtime":1615129705307,"results":"175","hashOfConfig":"92"},{"size":2123,"mtime":1615604594167,"results":"176","hashOfConfig":"92"},{"size":5551,"mtime":1615648108926,"results":"177","hashOfConfig":"92"},{"size":4075,"mtime":1615130624371,"results":"178","hashOfConfig":"92"},{"size":4296,"mtime":1615604500605,"results":"179","hashOfConfig":"92"},{"size":3066,"mtime":1615131820666,"results":"180","hashOfConfig":"92"},{"size":2841,"mtime":1615638403656,"results":"181","hashOfConfig":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},"f1vsdx",{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"184"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"184"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"184"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"184"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"184"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"184"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"184"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"184"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"184"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"184"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"184"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"184"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"184"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"184"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"184"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"184"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"184"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"184"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"184"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"184"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"184"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378","usedDeprecatedRules":"184"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"184"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"184"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"387","usedDeprecatedRules":"184"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390","usedDeprecatedRules":"184"},"F:\\Git\\WNC\\onlacademy-react\\src\\index.js",[],["391","392"],"F:\\Git\\WNC\\onlacademy-react\\src\\App.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\reportWebVitals.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppReducer.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppContext.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavSearch.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavHead.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\course.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppTypes.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\category.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Default\\index.jsx",["393"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport Header from '../../components/Header';\r\nimport Menu from './components/Menu';\r\nimport Content from './components/Content';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { INIT_HOME } from '../../AppTypes';\r\nimport { getInitCategories } from '../../services/category';\r\nimport { getInitCourses } from '../../services/course';\r\n\r\nimport './index.css';\r\n\r\nconst Default = (props) => {\r\n\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let categories = await getInitCategories();\r\n      let courses = await getInitCourses();\r\n\r\n      dispatch({\r\n        type: INIT_HOME,\r\n        payload: {\r\n          categories,\r\n          courses\r\n        }\r\n      });\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container className=\"main\">\r\n        <Row>\r\n          <Menu />\r\n          <Content />\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Default;",["394","395"],"F:\\Git\\WNC\\onlacademy-react\\src\\Layouts\\Admin\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\index.jsx",["396"],"import React, { useContext, useEffect } from 'react';\r\n\r\nimport Course from './components/Course';\r\nimport Paginate from '../../components/Paginate';\r\nimport MenuFilter from './components/MenuFilter';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { INIT_HOME, SEARCH_ACTION } from '../../AppTypes';\r\nimport { getAllCourses } from '../../services/course';\r\nimport { getDataPaginate } from '../../services/common';\r\n\r\nimport './index.css';\r\n\r\nconst Home = () => {\r\n  const { store, dispatch } = useContext(AppContext);\r\n  const isExist = store.courses.length > 0;\r\n\r\n  useEffect(() => {\r\n    if (!store.isSearchAction) {\r\n      const fetchData = async () => {\r\n        let { courses, paginate } = await getAllCourses();\r\n        dispatch({\r\n          type: INIT_HOME,\r\n          payload: {\r\n            courses,\r\n            paginate\r\n          }\r\n        });\r\n        dispatch({\r\n          type: SEARCH_ACTION,\r\n          payload: {\r\n            isSearchAction: true\r\n          }\r\n        });\r\n      }\r\n      fetchData();\r\n    }\r\n  }, [store.isSearchAction]);\r\n\r\n  const handlePageChange = async (url) => {\r\n    let { courses, paginate } = await getDataPaginate(url);\r\n    dispatch({\r\n      type: INIT_HOME,\r\n      payload: {\r\n        courses,\r\n        paginate\r\n      }\r\n    });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg={3} xs={12}>\r\n        <MenuFilter />\r\n      </Col>\r\n      <Col lg={9} xs=\"12\">\r\n        <div className=\"list-course\">\r\n          {isExist\r\n            ? store.courses.map((course, i) => <Course key={i} course={course} />)\r\n            : <div>Không có khóa học phù hợp</div>\r\n          }\r\n        </div>\r\n        {store.paginate.totalPages > 1 && <Paginate paginate={store.paginate} onPageChange={handlePageChange} />}\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\Course\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Login\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\auth.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\utils\\makeAPI.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\AppState.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\PrivateRoute\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Register\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\index.jsx",["397"],"import React, { useEffect, useContext } from 'react';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\n\r\nimport Header from '../../components/Header';\r\nimport Content from './components/Content';\r\nimport Footer from '../../components/Footer';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { INIT_MENU_HEADER } from '../../AppTypes';\r\nimport { getInitCategories } from '../../services/category';\r\n\r\nimport './index.css';\r\n\r\nconst Default = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res = await getInitCategories();\r\n      dispatch({\r\n        type: INIT_MENU_HEADER,\r\n        payload: {\r\n          categories: res.data,\r\n        }\r\n      });\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container className=\"main\">\r\n        <Row>\r\n          <Content />\r\n        </Row>\r\n      </Container>\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Default;","F:\\Git\\WNC\\onlacademy-react\\src\\components\\Header\\NavMenuItem.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\index.jsx",["398"],"import React, { useEffect, useState } from 'react';\r\nimport { useLocation, useHistory, useParams } from \"react-router-dom\";\r\n\r\nimport { getCourseById } from '../../services/course';\r\nimport { getVideoIntro } from '../../services/video';\r\n\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport MainImage from './components/MainImage';\r\nimport Detail from './components/Detail';\r\nimport ModalVideo from './components/ModalVideo';\r\nimport Recommend from './components/Recommend';\r\nimport Feedback from './components/Feedbback';\r\nimport { alertMessage } from '../../utils/common';\r\nimport './index.css';\r\n\r\nconst Course = () => {\r\n  let { courseId } = useParams();\r\n  const [course, setCourse] = useState({});\r\n  const [feedbacks, setFeedbacks] = useState([]);\r\n  const [recommend, setRecommend] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n  const [videoIntro, setVideoIntro] = useState(null);\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const { from } = location.state || { from: { pathname: '/' } };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res = await getCourseById(courseId);\r\n      if (res === null) {\r\n        alertMessage({ type: 'warning', message: 'Khóa học không tồn tại!' });\r\n        history.replace(from);\r\n      } else {\r\n        setCourse(res.course);\r\n        setFeedbacks(res.feedbacks);\r\n        setRecommend(res.recommend);\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [courseId]);\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n  }\r\n\r\n  const handleShow = async () => {\r\n    let res = await getVideoIntro(courseId);\r\n    if (res === null) {\r\n      alertMessage({ type: 'info', message: 'Khóa học chưa có video hướng dẫn' });\r\n    } else {\r\n      setVideoIntro(res);\r\n      setShow(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg={4} xs={12}>\r\n        <MainImage image={course.img_large} />\r\n      </Col>\r\n\r\n      <Col lg={8} xs={12}>\r\n        <Detail course={course} onShowModal={handleShow} />\r\n      </Col>\r\n\r\n      <Col lg={12} xs={12}>\r\n        {recommend.length > 0 && <Recommend recommends={recommend} />}\r\n      </Col>\r\n\r\n      <Col lg={12} xs={12}>\r\n        {feedbacks.length > 0 && <Feedback feedbacks={feedbacks} />}\r\n      </Col>\r\n\r\n      {videoIntro && <ModalVideo show={show} videoIntro={videoIntro} onCloseModal={handleClose} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Course;","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\format.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\MenuFilter\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Home\\components\\ItemFilter\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\search.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\ModalVideo\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\MainImage\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Detail\\index.jsx",["399"],"import { React, useContext, useState, useEffect } from 'react';\r\nimport parse from 'html-react-parser';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport { formatToVND, ddmmyy } from '../../../../utils/format';\r\nimport { alertMessage } from '../../../../utils/common';\r\nimport { buyCourse } from '../../../../services/course';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT, TEACHER, ADMIN } from '../../../../AppTypes';\r\n\r\nimport './index.css';\r\n\r\nconst Detail = ({ course, onShowModal }) => {\r\n  const history = useHistory();\r\n  const { store, dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isBuy, setIsBuy] = useState(false);\r\n  const handleShow = () => {\r\n    onShowModal();\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isBuy) {\r\n      const BuyCourse = async () => {\r\n        const bought = await buyCourse(course.id);\r\n        if (mounted) {\r\n          if (bought.state) {\r\n            alertMessage({ type: 'success', message: 'Mua khóa học thành công' });\r\n            setIsLoading(false);\r\n            setIsBuy(false);\r\n          } else {\r\n            setIsLoading(false);\r\n            setIsBuy(false);\r\n            if (bought.auth !== undefined && bought.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n              alertMessage({ type: 'error', message: 'Đăng nhập để mua khóa học' });\r\n              history.push('/login');\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Không thể mua khóa học này' })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      BuyCourse();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isBuy, course]);\r\n\r\n  const onBuyCourse_clicked = async () => {\r\n    setIsLoading(true);\r\n    setIsBuy(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Jumbotron className=\"pt-0 pb-0 bg-l\">\r\n        <h1>{course.name}</h1>\r\n        <p>\r\n          <strong>{course.sort_desc}</strong>\r\n        </p>\r\n        <p>\r\n          <Badge variant=\"warning\">Điểm đánh giá</Badge>&nbsp;\r\n          <span className=\"yellow w6 mr-3\">\r\n            {course.point_evaluate || '(chưa có)'} <i className=\"fa fa-thumbs-o-up\"></i>\r\n          </span>&nbsp;\r\n          <span className=\"w6\">\r\n            {course.qty_student_registed || '(chưa có)'} học viên\r\n          </span>\r\n        </p>\r\n        <p>\r\n          <strong><i className=\"fa fa-graduation-cap\"></i> Giáo viên: <span className=\"info\">{course.teacher}</span></strong>\r\n        </p>\r\n        <p>\r\n          <strong><i className=\"fa fa-cloud-upload\"></i> Cập nhật: {ddmmyy(course.updated_at)}</strong>\r\n        </p>\r\n        {course.price_promo > 0\r\n          ?\r\n          <h4>\r\n            <i className=\"fa fa-tag\"></i> {formatToVND(course.price_promo)}&nbsp;\r\n          <span className=\"discount\">{formatToVND(course.price)}</span>\r\n          </h4>\r\n          :\r\n          <h4>\r\n            <i className=\"fa fa-tag\"></i> {formatToVND(course.price)}\r\n          </h4>\r\n        }\r\n        <p>\r\n          {store.role !== TEACHER && store.role !== ADMIN &&\r\n            <Button variant=\"outline-info mr-3\" onClick={onBuyCourse_clicked}>\r\n              <strong>Mua khóa học</strong>\r\n            </Button>\r\n          }\r\n          <Button variant=\"outline-danger\" onClick={handleShow}><strong>Xem trước</strong></Button>\r\n        </p>\r\n        <hr />\r\n        <h5>Chi tiết</h5>\r\n        {parse(course.detail_desc || '')}\r\n      </Jumbotron>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Recommend\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Feedbback\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\common.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Paginate\\index.jsx",["400"],"import React, { useState, useEffect } from 'react';\r\nimport ReactPaginate from 'react-paginate';\r\nimport './index.css';\r\n\r\nconst Paginate = ({ paginate, onPageChange }) => {\r\n  const [forcePage, setForcePage] = useState(null);\r\n  useEffect(() => {\r\n    if (paginate.currentPage !== forcePage + 1) {\r\n      setForcePage(0);\r\n    }\r\n  }, [paginate.uri, paginate.currentPage])\r\n\r\n  const handlePageClick = (data) => {\r\n    setForcePage(data.selected);\r\n    const api = `${paginate.uri}&limit=${paginate.limit}&page=${data.selected + 1}`;\r\n    onPageChange(api);\r\n  }\r\n\r\n  return (\r\n    <ReactPaginate\r\n      pageCount={paginate.totalPages}\r\n      marginPagesDisplayed={1}\r\n      pageRangeDisplayed={2}\r\n      onPageChange={handlePageClick}\r\n      containerClassName={'pagination paginate-cus'}\r\n      previousLabel={<i className=\"fa fa-angle-left\"></i>}\r\n      previousClassName={'page-item'}\r\n      previousLinkClassName={'page-link'}\r\n      nextLabel={<i className=\"fa fa-angle-right\"></i>}\r\n      nextClassName={'page-item'}\r\n      nextLinkClassName={'page-link'}\r\n      breakLabel={'...'}\r\n      breakClassName={'page-item'}\r\n      breakLinkClassName={'page-link'}\r\n      pageClassName={'page-item'}\r\n      pageLinkClassName={'page-link'}\r\n      activeClassName={'active'}\r\n      forcePage={forcePage}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Paginate;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Menu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ItemMenu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Info\\index.jsx",["401","402"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport {\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  stringGenerate,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { getUser } from '../../../../services/user';\r\nimport { update } from '../../../../services/user';\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  full_name: yup.string(),\r\n  address: yup.string(),\r\n  phone: yup\r\n    .string()\r\n    .max(11, 'Số điện thoại của bạn không hợp lệ')\r\n    .min(10, 'Số điện thoại của bạn không hợp lệ')\r\n});\r\n\r\nconst Info = () => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [user, setUser] = useState({\r\n    id: '',\r\n    username: '',\r\n    full_name: '',\r\n    phone: '',\r\n    address: '',\r\n    img_url: '',\r\n    img_name: ''\r\n  });\r\n  const [chooseFile, setChooseFile] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res = await getUser();\r\n      if (res.state) {\r\n        setUser(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleChooseFile = (event) => {\r\n    const file = event.target.files[0];\r\n    const previewFile = URL.createObjectURL(file);\r\n    setUser({ ...user, img_url: previewFile });\r\n    setChooseFile(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessError;\r\n        const result = await update(formData);\r\n        if (mounted) {\r\n          if (result.state) {\r\n            setIsSubmit(false);\r\n            if (user.img_name !== '' && user.img_name !== null) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: user.img_name,\r\n                folderUrl: `images/avatar/user-${user.id}`\r\n              });\r\n              setChooseFile(false);\r\n            }\r\n            setUser({\r\n              ...user,\r\n              img_url: formData.img_url,\r\n              img_name: formData.img_name\r\n            });\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ trong quá trình cập nhật.' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật thông tin thành công.' });\r\n            }\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'error', message: 'Cập nhật thông tin thất bại.' });\r\n            setIsLoading(false);\r\n            if (result.auth !== undefined && result.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, setUser, user, formData]);\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.image;\r\n\r\n    let imgName = stringGenerate();\r\n    if (chooseFile) {\r\n      imgName += data.image[0].name;\r\n      const url = await uploadToFirebase({\r\n        file: data.image[0],\r\n        fileName: imgName,\r\n        folderUrl: `images/avatar/user-${user.id}`\r\n      });\r\n\r\n      if (url === null) {\r\n        alertMessage({ type: 'error', message: 'Cập nhật thất bại' });\r\n        setIsLoading(false);\r\n        setChooseFile(false);\r\n        return;\r\n      }\r\n      form.img_url = url;\r\n      form.img_name = imgName;\r\n    } else {\r\n      form.img_url = user.img_url || '';\r\n      form.img_name = user.img_name || '';\r\n    }\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={8} className=\"col-relative\">\r\n            <Form.Group>\r\n              <Form.Label>Tài khoản</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" defaultValue={user.username} readOnly />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\"></span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"formBasicEmail\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" defaultValue={user.email} readOnly />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\"></span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Họ và tên</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"full_name\" defaultValue={user.full_name} ref={register} placeholder=\"Nhập họ tên\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.full_name?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n              <Form.Label>Địa chỉ</Form.Label>\r\n              <Form.Control as=\"textarea\" name=\"address\" defaultValue={user.address} ref={register} rows={3} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.address?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Điện thoại</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"phone\" defaultValue={user.phone} ref={register} placeholder=\"Nhập số điện thoại\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.phone?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" className=\"btn-update\" variant=\"outline-dark\">Cập nhật</Button>\r\n          </Col>\r\n          <Col lg={4}>\r\n            <Image className=\"avatar\" src={user.img_url} roundedCircle />\r\n            <Form.Group>\r\n              <Form.File id=\"exampleFormControlFile1\" name=\"image\" onChange={handleChooseFile} ref={register} accept=\"image/*\" />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Info;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\ChangePassword\\index.jsx",["403","404"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport AppContext from '../../../../AppContext';\r\nimport { changePassword, getUser } from '../../../../services/user';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  old_password: yup\r\n    .string()\r\n    .required('Bạn chưa nhập mật khẩu cũ')\r\n    .min(8, \"Mật khẩu phải từ 8 kí tự trở lên\"),\r\n  password: yup\r\n    .string()\r\n    .required('Bạn chưa nhập mật khẩu mới')\r\n    .min(8, \"Mật khẩu phải từ 8 kí tự trở lên\"),\r\n  confirm_password: yup\r\n    .string()\r\n    .required('Bạn chưa nhập xác nhận mật khẩu mới')\r\n    .oneOf([yup.ref(\"password\")], \"Mật khẩu mới không giống nhau\")\r\n});\r\n\r\nconst ChangePassword = () => {\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const [user, setUser] = useState({\r\n    id: '',\r\n    username: '',\r\n    social_account: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let res = await getUser();\r\n      if (res.state) {\r\n        setUser(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await changePassword(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Đổi mật khẩu thành công' });\r\n            setIsLoading(false);\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'error', message: 'Đổi mật khẩu thất bại' });\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n  }, [isSubmit, formData, reset]);\r\n\r\n  const onSubmit = (data) => {\r\n    setIsLoading(true);\r\n    setFormData(data);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Row>\r\n        <Col lg={8} className=\"form-relative\">\r\n          <Form onSubmit={handleSubmit(onSubmit)}>\r\n            <Form.Group>\r\n              <Form.Label>Mật khẩu cũ</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"old_password\" ref={register} placeholder=\"Mật khẩu cũ\" autoFocus readOnly={user.social_account} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.old_password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Mật khẩu mới</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"password\" ref={register} placeholder=\"Mật khẩu mới\" readOnly={user.social_account} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Nhập lại mật khẩu mới</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"confirm_password\" ref={register} placeholder=\"Mật khẩu mới\" readOnly={user.social_account} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.confirm_password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button type=\"submit\" className=\"btn-change-password\" variant=\"outline-dark\">Đổi mật khẩu</Button>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default ChangePassword;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Content\\index.jsx",["405","406"],"import React, { useContext } from 'react';\r\nimport { Switch, useRouteMatch, Route } from \"react-router-dom\";\r\n\r\nimport Info from '../Info';\r\nimport RegisteredCourses from '../RegisteredCourses';\r\nimport ChangePassword from '../ChangePassword';\r\nimport LoveList from '../LoveList';\r\n\r\nimport { USER } from '../../../../AppTypes';\r\nimport AppContext from '../../../../AppContext';\r\n\r\nconst Content = () => {\r\n  const { store } = useContext(AppContext);\r\n  const match = useRouteMatch();\r\n  return (\r\n    <Switch>\r\n      <Route exact path={`${match.path}`}>\r\n        <Info />\r\n      </Route>\r\n      {/* {store.role === USER && */}\r\n      <Route exact path={`${match.path}/registered-courses`}>\r\n        <RegisteredCourses />\r\n      </Route>\r\n\r\n      <Route exact path={`${match.path}/love-courses`}>\r\n        <LoveList />\r\n      </Route>\r\n      {/* } */}\r\n      <Route exact path={`${match.path}/change-password`}>\r\n        <ChangePassword />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n}\r\n\r\nexport default Content;","F:\\Git\\WNC\\onlacademy-react\\src\\services\\user.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Default\\components\\Content\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\utils\\firebase.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Loading\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\RegisteredCourses\\index.jsx",["407","408","409"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport Course from '../Course';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { getUserCourses } from '../../../../services/course';\r\nimport { create, remove } from '../../../../services/lovelist';\r\nimport { getLoveList } from '../../../../services/lovelist';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst RegisteredCourses = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isAdd, setIsAdd] = useState(false);\r\n  const [isSub, setIsSub] = useState(false);\r\n  const [userCourses, setUserCourses] = useState([]);\r\n  const [loveIds, setLoveIds] = useState([]);\r\n  const isExist = userCourses.length > 0;\r\n  const [userCourseStarId, setUserCourseStarId] = useState(null);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      let result = await getUserCourses();\r\n      if (result.state) {\r\n        setUserCourses(result.data)\r\n      } else {\r\n        if (result.auth !== undefined && result.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n\r\n    const fetchLoveList = async () => {\r\n      let res = await getLoveList();\r\n      if (res.state) {\r\n        let ids = res.data.reduce((prev, cur) => {\r\n          prev.push(cur.courses_id);\r\n          return prev;\r\n        }, [])\r\n        setLoveIds(ids);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchLoveList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isAdd) {\r\n      const actionAddStar = async () => {\r\n        let res = await create(userCourseStarId);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsAdd(false);\r\n            setLoveIds([...loveIds, userCourseStarId]);\r\n            alertMessage({ type: 'success', message: 'Thêm vào danh sách yêu thích thành công' })\r\n          } else {\r\n            setIsAdd(false);\r\n            alertMessage({ type: 'error', message: 'Thêm vào danh sách yêu thích thất bại' })\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionAddStar();\r\n    }\r\n\r\n    return () => mounted = false;\r\n  }, [isAdd, userCourseStarId, loveIds]);\r\n\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSub) {\r\n      const actionSubStar = async () => {\r\n        let res = await remove(userCourseStarId);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSub(false);\r\n            let newList = loveIds.filter(id => id !== userCourseStarId)\r\n            setLoveIds(newList);\r\n            alertMessage({ type: 'success', message: 'Xóa khỏi danh sách yêu thích thành công' })\r\n          } else {\r\n            setIsSub(false);\r\n            alertMessage({ type: 'error', message: 'Xóa khỏi danh sách yêu thích thất bại' })\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionSubStar();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSub, userCourseStarId, loveIds])\r\n\r\n  const handleClickAddStar = (userCourse) => {\r\n    setUserCourseStarId(userCourse.courses_id);\r\n    setIsAdd(true);\r\n  }\r\n\r\n  const handleClickSubStar = (userCourse) => {\r\n    setUserCourseStarId(userCourse.courses_id);\r\n    setIsSub(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { isExist ?\r\n        userCourses.map((userCourse, idx) =>\r\n          <Course key={idx} userCourse={userCourse} onClickAddStart={handleClickAddStar} onClickSubStart={handleClickSubStar} loveIds={loveIds} />\r\n        )\r\n        :\r\n        <div>Bạn chưa chưa mua bất kì khóa học nào</div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RegisteredCourses;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\Course\\index.jsx",["410"],"import React, { useContext, useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Media from 'react-bootstrap/Media'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Swal from 'sweetalert2';\r\nimport './index.css';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport AppContext from '../../../../AppContext';\r\nimport { alertMessage } from '../../../../utils/common';\r\nimport { create } from '../../../../services/feedback';\r\n\r\nconst Course = ({ userCourse, onClickAddStart, onClickSubStart, loveIds }) => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const history = useHistory();\r\n  const [isFeedback, setIsFeedback] = useState(false);\r\n  const [feedbackContent, setFeedbackContent] = useState(null);\r\n  const uri = `/document/courses/${userCourse.courses_id}`;\r\n  const onCourse_clicked = () => {\r\n    history.push(uri);\r\n  }\r\n\r\n  const onStarAdd_clicked = () => {\r\n    onClickAddStart(userCourse);\r\n  }\r\n\r\n  const onStarSub_clicked = () => {\r\n    onClickSubStart(userCourse);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isFeedback) {\r\n      const sendFeedback = async () => {\r\n        const res = await create(feedbackContent);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsFeedback(false);\r\n            alertMessage({ type: 'success', message: 'Gửi phản hồi thành công' });\r\n          } else {\r\n            setIsFeedback(false);\r\n            alertMessage({ type: 'error', message: 'Gửi phản hồi thất bại' });\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      };\r\n      sendFeedback();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isFeedback, feedbackContent])\r\n\r\n  const onSendFeedback_clicked = async () => {\r\n    const { value: form } = await Swal.fire({\r\n      html:\r\n        `<input type=\"number\"\r\n            id=\"point_evaluate\"\r\n            min=\"0\" \r\n            max=\"100\" \r\n            name=\"point_evaluate\" \r\n            class=\"swal2-input\" \r\n            placeholder=\"Điểm đánh giá 0-100\">` +\r\n        `<textarea\r\n            id=\"comment\"\r\n            name=\"comment\" \r\n            rows=\"4\" \r\n            cols=\"50\" \r\n            class=\"swal2-textarea\"\r\n            placeholder=\"Nhập phản hồi của bạn về khóa học...\">`,\r\n      title: 'Phản hồi',\r\n      cancelButtonText: 'Hủy',\r\n      confirmButtonText: 'Gửi',\r\n      showCancelButton: true,\r\n      preConfirm: () => {\r\n        return [\r\n          document.getElementById('point_evaluate').value,\r\n          document.getElementById('comment').value\r\n        ]\r\n      }\r\n    })\r\n\r\n    if (form && form[0] !== '' && form[1] !== '') {\r\n      let data = {\r\n        courses_id: userCourse.courses_id,\r\n        point_evaluate: +form[0],\r\n        comment: form[1]\r\n      }\r\n      setFeedbackContent(data);\r\n      setIsFeedback(true);\r\n    } else {\r\n      alertMessage({ type: 'info', message: 'Phản hồi không được gửi đi' });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row className=\"col-course-registered\">\r\n      <Col lg={10} className=\"course-registered\" onClick={onCourse_clicked}>\r\n        <Media>\r\n          <img\r\n            width={125}\r\n            height={125}\r\n            className=\"align-self-start mr-3\"\r\n            src={userCourse.img}\r\n            alt=\"Generic placeholder\"\r\n          />\r\n          <Media.Body>\r\n            <h5>{userCourse.name}</h5>\r\n            <h6>{userCourse.title}</h6>\r\n            <p>\r\n              <strong><i className=\"fa fa-graduation-cap\"></i> Giáo viên: <span className=\"info\">{userCourse.teacher}</span></strong>\r\n            </p>\r\n            <p>\r\n              <strong><Badge variant=\"success\">Đang xem bài {userCourse.process_courses_id}</Badge>&nbsp; </strong>\r\n            </p>\r\n          </Media.Body>\r\n        </Media>\r\n      </Col>\r\n      <Col lg={2}>\r\n        <Row>\r\n          <Col lg={6}>\r\n            {loveIds.includes(userCourse.courses_id)\r\n              ? <i className=\"fa fa-star fa-2x star\" onClick={onStarSub_clicked}></i>\r\n              : <i className=\"fa fa-star-o fa-2x star\" onClick={onStarAdd_clicked}></i>\r\n            }\r\n          </Col>\r\n          <Col lg={6}>\r\n            <i className=\"fa fa-twitch fa-2x feedback\" onClick={onSendFeedback_clicked}></i>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row >\r\n  );\r\n}\r\n\r\nexport default Course;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\index.jsx",["411"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\n\r\nimport Accordion from 'react-bootstrap/Accordion';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport ListVideo from './components/ListVideo';\r\nimport ListSlide from './components/ListSlide';\r\nimport Video from './components/Video';\r\nimport Slide from './components/Slide';\r\nimport BreadCrumb from './components/BreadCrumb';\r\n\r\nimport AppContext from '../../AppContext';\r\nimport { LOGOUT } from '../../AppTypes';\r\nimport { getVideos } from '../../services/video';\r\nimport { getSlides } from '../../services/slide';\r\n\r\nconst Document = () => {\r\n  const { courseId } = useParams();\r\n  const { dispatch } = useContext(AppContext);\r\n  const [videos, setVideos] = useState([]);\r\n  const [videoActive, setVideoActive] = useState(null);\r\n  const [slides, setSlides] = useState([]);\r\n  const [slideActive, setSlideActive] = useState(null);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const resVideo = await getVideos(courseId);\r\n      const resSlide = await getSlides(courseId);\r\n      if (resVideo.state) {\r\n        setVideos(resVideo);\r\n        setVideoActive(resVideo[0]);\r\n      }\r\n      if (resSlide.state) {\r\n        setSlides(resSlide);\r\n        setSlideActive(resSlide[0]);\r\n      }\r\n      if (!resVideo.state || !resSlide.state) {\r\n        if (\r\n          (resVideo.auth !== undefined && resVideo.auth.authenticated === false) ||\r\n          (resSlide.auth !== undefined && resSlide.auth.authenticated === false)\r\n        ) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n          history.push('/login')\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleShowVideoActive = (video) => {\r\n    setVideoActive(video);\r\n  }\r\n\r\n  const handleShowSlideActive = (slide) => {\r\n    setSlideActive(slide);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg={12} xs={12}>\r\n        <BreadCrumb courseId={courseId} />\r\n        <Accordion defaultActiveKey=\"0\">\r\n          <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n              <strong><i className=\"fa fa-angle-down\"></i> Danh sách video bài giảng</strong>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card.Body>\r\n                {videos.length > 0\r\n                  ? <Row>\r\n                    <Col lg={3}>\r\n                      <ListVideo videos={videos} onShowVideoActive={handleShowVideoActive} videoActive={videoActive} />\r\n                    </Col>\r\n                    <Col lg={9}>\r\n                      <Video video={videoActive} />\r\n                    </Col>\r\n                  </Row>\r\n                  : <div>Bạn chưa mua khóa học này hoặc tài liệu chưa được cập nhật.</div>\r\n                }\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n\r\n          <Card>\r\n            <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n              <strong><i className=\"fa fa-angle-down\"></i> Tài liệu bài giảng</strong>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <Card.Body>\r\n                {slides.length > 0\r\n                  ? <Row>\r\n                    <Col lg={3}>\r\n                      <ListSlide slides={slides} onShowSlideActive={handleShowSlideActive} slideActive={slideActive} />\r\n                    </Col>\r\n                    <Col lg={9}>\r\n                      <Slide slide={slideActive} />\r\n                    </Col>\r\n                  </Row>\r\n                  : <div>Bạn chưa mua khóa học này hoặc tài liệu chưa được cập nhật.</div>\r\n                }\r\n              </Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Document;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Video\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\BreadCrumb\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\video.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\components\\Footer\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Content\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\Menu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Teacher\\components\\ItemMenu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Add\\index.jsx",["412","413"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport { getInitCategories } from '../../../../services/category';\r\nimport { getUser } from '../../../../services/user';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { create } from '../../../../services/course';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Bạn chưa nhập tiêu đề khóa học'),\r\n  name: yup.string().required('Bạn chưa nhập tên khóa học'),\r\n  sort_desc: yup.string().required('Bạn chưa nhập mô tả')\r\n});\r\n\r\nconst Add = () => {\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [previewImgLarge, setPreviewImgLarge] = useState('');\r\n  const [previewImgSmall, setPreviewImgSmall] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [user, setUser] = useState({\r\n    id: null,\r\n    name: null,\r\n  })\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      let res = await getUser();\r\n      if (res.state) {\r\n        setUser(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchUser();\r\n    const fetchData = async () => {\r\n      let result = await getInitCategories();\r\n      let initial = [];\r\n      let remap = result.data.reduce((accumulator, currentValue) => {\r\n        accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n        return accumulator;\r\n      }, initial);\r\n      setCategories(remap);\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await create(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Tạo khóa học thành công.' });\r\n            setIsLoading(false);\r\n            setPreviewImgSmall('');\r\n            setPreviewImgLarge('');\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            await removeToFirebase({\r\n              fileName: formData.img_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            await removeToFirebase({\r\n              fileName: formData.img_large_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            alertMessage({ type: 'error', message: 'Tạo khóa học thất bại.' });\r\n            setIsLoading(false);\r\n            setPreviewImgSmall('');\r\n            setPreviewImgLarge('');\r\n            reset();\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, reset, user]);\r\n\r\n  const handleFile = (file) => {\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'image') {\r\n      return null;\r\n    }\r\n    let path = URL.createObjectURL(file);\r\n    return path;\r\n  }\r\n\r\n  const handleChooseImaSmall = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n      setPreviewImgSmall('')\r\n    } else {\r\n      setPreviewImgSmall(path);\r\n    }\r\n  }\r\n\r\n  const handleChooseImaLarge = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n      setPreviewImgLarge('');\r\n    } else {\r\n      setPreviewImgLarge(path);\r\n    }\r\n  }\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.small_image;\r\n    delete form.large_image;\r\n\r\n    if (previewImgLarge === '' || previewImgSmall === '') {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn ảnh cho khóa học!' });\r\n      setIsLoading(false);\r\n      return\r\n    }\r\n\r\n    let imgName = stringGenerate() + data.small_image[0].name;\r\n    let imgLargeName = stringGenerate() + data.large_image[0].name;\r\n\r\n    let urlImg = await uploadToFirebase({\r\n      file: data.small_image[0],\r\n      fileName: imgName,\r\n      folderUrl: `images/courses/teacher-id-${user.id}`\r\n    });\r\n    let urlLargeImg = await uploadToFirebase({\r\n      file: data.large_image[0],\r\n      fileName: imgLargeName,\r\n      folderUrl: `images/courses/teacher-id-${user.id}`\r\n    });\r\n    if (urlImg === null || urlLargeImg === null) {\r\n      alertMessage({ type: 'error', message: 'Đã có lỗi xảy ra!' });\r\n      setIsLoading(false);\r\n      setPreviewImgSmall('');\r\n      setPreviewImgLarge('');\r\n      reset();\r\n      return;\r\n    }\r\n    form.img = urlImg;\r\n    form.img_large = urlLargeImg;\r\n    form.img_name = imgName;\r\n    form.img_large_name = imgLargeName;\r\n    form.teacher = user.full_name || 'Giáo viên ẩn danh';\r\n    form.detail_desc = description;\r\n    form.categories_id = +data.categories_id;\r\n    // form.price = +data.price;\r\n    // form.price_promo = +data.price_promo;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={9} xs={12} className=\"col-form-create\">\r\n            <Form.Group>\r\n              <Form.Label>Lĩnh vực</Form.Label>\r\n              <select className=\"form-control\" name=\"categories_id\" ref={register}>\r\n                {categories.map((opt, idx) =>\r\n                  <option key={idx} defaultValue={idx === 0 ? opt.value : null} value={opt.value}>{opt.label}</option>\r\n                )}\r\n              </select>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Tiêu đề</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"title\" ref={register} placeholder=\"Nhập tiêu đề\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.title?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Tên khóa học</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Nhập tên khóa học\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.name?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n              <Form.Label>Mô tả ngắn</Form.Label>\r\n              <Form.Control as=\"textarea\" name=\"sort_desc\" ref={register} rows={3} />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.sort_desc?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Mô tả chi tiết</Form.Label>\r\n              <ReactQuill\r\n                theme=\"snow\"\r\n                name=\"detail_desc\"\r\n                style={{ height: '200px', marginBottom: '35px' }}\r\n                value={description}\r\n                onChange={setDescription}\r\n                ref={register}\r\n              />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.detail_desc?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Ảnh nhỏ</Form.Label><br />\r\n              <Image className=\"avatar\" src={previewImgSmall} roundedCircle />\r\n              <Form.File name=\"small_image\" onChange={handleChooseImaSmall} ref={register} accept=\"image/*\" />\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Ảnh lớn</Form.Label><br />\r\n              <Image className=\"avatar\" src={previewImgLarge} roundedCircle />\r\n              <Form.File name=\"large_image\" onChange={handleChooseImaLarge} ref={register} accept=\"image/*\" />\r\n            </Form.Group>\r\n\r\n            {/* <Form.Group>\r\n              <Form.Label>Giá</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"number\" name=\"price\" ref={register} placeholder=\"Nhập giá khóa học\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.price?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group>\r\n              <Form.Label>Giá khuyến mãi (nếu có)</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"number\" name=\"price_promo\" ref={register} placeholder=\"Nhập giá khóa học\" />\r\n              <Form.Text className=\"text-muted message\">\r\n                <span className=\"msg\">{errors.price_promo?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group> */}\r\n\r\n            <Button type=\"submit\" className=\"btn-create\" variant=\"outline-dark\">Thêm khóa học</Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Add;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Lesson\\index.jsx",["414"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Select from 'react-select';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { coursesOfTeacher } from '../../../../services/course';\r\nimport { getVideos } from '../../../../services/video';\r\nimport { getSlides } from '../../../../services/slide';\r\nimport { getUser } from '../../../../services/user';\r\n\r\nimport ListVideo from '../ListVideo';\r\nimport ListSlide from '../ListSlide';\r\nimport AddVideo from '../AddVideo';\r\nimport AddSlide from '../AddSlide';\r\nimport EditVideo from '../EditVideo';\r\nimport EditSlide from '../EditSlide';\r\n\r\nimport './index.css';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst Lesson = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const [courses, setCourses] = useState([]);\r\n  const [selected, setSelected] = useState({ value: null, label: null });\r\n  const [videos, setVideos] = useState([]);\r\n  const [slides, setSlides] = useState([]);\r\n  const [isShowButtonAdd, setIsShowButtonAdd] = useState(false);\r\n  const [videoActive, setVideoActive] = useState(null);\r\n  const [slideActive, setSlideActive] = useState(null);\r\n  const [user, setUser] = useState({ id: null, name: '' });\r\n  const [toggleAdd, setToggleAdd] = useState(true);\r\n  const [toggleEdit, setToggleEdit] = useState(true);\r\n  const [toggleList, setToggleList] = useState(true);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      let res = await getUser();\r\n      if (res.state) {\r\n        setUser(res);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchUser();\r\n\r\n    const fetchData = async () => {\r\n      let res = await coursesOfTeacher();\r\n      if (res.state) {\r\n        if (res.data.length === 0) {\r\n          alertMessage({ type: 'warning', message: 'Chưa có khóa học nào được thêm.' })\r\n          history.push('/teacher/course/add');\r\n          return;\r\n        }\r\n\r\n        let initial = [];\r\n        let remap = res.data.reduce((accumulator, currentValue) => {\r\n          accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n          return accumulator;\r\n        }, initial);\r\n        setCourses(remap);\r\n        setSelected(remap[0])\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchData();\r\n  }, [])\r\n\r\n  const handleSelectChange = async (selected) => {\r\n    setSelected(selected);\r\n    let videos = await getVideos(selected.value);\r\n    if (videos.authenticated === false) {\r\n      dispatch({\r\n        type: LOGOUT,\r\n        payload: {\r\n          isLogged: false\r\n        }\r\n      });\r\n    } else {\r\n      setVideos(videos);\r\n    }\r\n\r\n    let slides = await getSlides(selected.value);\r\n    if (slides.authenticated === false) {\r\n      dispatch({\r\n        type: LOGOUT,\r\n        payload: {\r\n          isLogged: false\r\n        }\r\n      });\r\n    } else {\r\n      setSlides(slides)\r\n    }\r\n\r\n    setIsShowButtonAdd(false);\r\n  }\r\n\r\n  const handleVideoActive = (video) => {\r\n    setVideoActive(video);\r\n    setIsShowButtonAdd(true);\r\n    setToggleAdd(true);\r\n    setToggleEdit(true);\r\n    setToggleList(true);\r\n  }\r\n\r\n  const handleSlideActive = (slide) => {\r\n    setSlideActive(slide);\r\n    setIsShowButtonAdd(true);\r\n    setToggleAdd(false);\r\n    setToggleEdit(false);\r\n    setToggleList(false);\r\n  }\r\n\r\n  const onAdd_clicked = () => {\r\n    setIsShowButtonAdd(false);\r\n    setToggleAdd(true);\r\n    setToggleEdit(true);\r\n    setToggleList(true);\r\n  }\r\n\r\n  const handleUpdateVideo = (video) => {\r\n    let newVideos = [...videos];\r\n    let videoUpdateId = newVideos.findIndex(item => item.id === video.id);\r\n    newVideos[videoUpdateId] = video;\r\n    setVideos(newVideos)\r\n  }\r\n\r\n  const handleUpdateSlide = (slide) => {\r\n    let newSlides = [...slides];\r\n    let slideUpdateId = newSlides.findIndex(item => item.id === slide.id);\r\n    newSlides[slideUpdateId] = slide;\r\n    setSlides(newSlides);\r\n  }\r\n\r\n  const handleGetNewVideo = (video) => {\r\n    setVideos([...videos, video]);\r\n  }\r\n\r\n  const handleGetNewSlide = (slide) => {\r\n    setSlides([...slides, slide]);\r\n  }\r\n\r\n  const handleShowSlide = () => {\r\n    setToggleAdd(false);\r\n    setToggleList(false);\r\n  }\r\n\r\n  const handleShowVideo = () => {\r\n    setToggleAdd(true);\r\n    setToggleList(true);\r\n  }\r\n\r\n  const handleShowEditVideo = () => {\r\n    setToggleEdit(true);\r\n    setToggleList(true);\r\n    setVideoActive(videos[0]);\r\n  }\r\n\r\n  const handleShowEditSlide = () => {\r\n    setToggleEdit(false);\r\n    setToggleList(false);\r\n    setSlideActive(slides[0]);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col lg={12} xs={12}>\r\n          <Form.Group>\r\n            <Form.Label>Khóa học đã tạo</Form.Label>\r\n            <Select\r\n              value={selected}\r\n              onChange={handleSelectChange}\r\n              isClearable={false}\r\n              isSearchable={true}\r\n              options={courses}\r\n            />\r\n          </Form.Group>\r\n        </Col>\r\n        <Col lg={12} xs={12}>\r\n          <Row>\r\n            <Col lg={4} xs={12}>\r\n              {toggleList\r\n                ? <ListVideo videos={videos} onVideoActive={handleVideoActive} />\r\n                : <ListSlide slides={slides} onSlideActive={handleSlideActive} />\r\n              }\r\n            </Col>\r\n            <Col lg={8} xs={12} className=\"form-relative\">\r\n              {isShowButtonAdd &&\r\n                <>\r\n                  <Button variant=\"outline-danger\" className=\"btn-add\" onClick={onAdd_clicked}>\r\n                    <i className=\"fa fa-plus\"></i> Thêm mới\r\n                  </Button>\r\n                  {toggleEdit\r\n                    ? <EditVideo courseId={selected.value} videoUpdate={videoActive} user={user} onUpdateVideo={handleUpdateVideo} onShowEditSlide={handleShowEditSlide} />\r\n                    : <EditSlide courseId={selected.value} slideUpdate={slideActive} user={user} onUpdateSlide={handleUpdateSlide} onShowEditVideo={handleShowEditVideo} />\r\n                  }\r\n                </>\r\n              }\r\n              {!isShowButtonAdd &&\r\n                <>\r\n                  {toggleAdd\r\n                    ? <AddVideo courseId={selected.value} user={user} onNewVideo={handleGetNewVideo} onShowAddSlide={handleShowSlide} />\r\n                    : <AddSlide courseId={selected.value} user={user} onNewSlide={handleGetNewSlide} onShowAddVideo={handleShowVideo} />\r\n                  }\r\n                </>\r\n              }\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Lesson;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\VideoThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\VideoThumbnail\\index.jsx",["415"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Badge from 'react-bootstrap/Badge';\r\n\r\nimport './index.css';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { updateView } from '../../../../services/video';\r\n\r\nconst VideoThumbnail = ({ video, onShowVideo, videoActive }) => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isUpdateView, setIsUpdateView] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isUpdateView && video.id !== undefined) {\r\n      const onUpdateView = async () => {\r\n        const res = await updateView(video.id);\r\n        if (mounted) {\r\n          setIsUpdateView(false);\r\n          if (res.auth !== undefined && res.auth.authenticated === false) {\r\n            dispatch({\r\n              type: LOGOUT,\r\n              payload: {\r\n                isLogged: false\r\n              }\r\n            })\r\n          }\r\n        }\r\n      }\r\n      onUpdateView();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isUpdateView, video])\r\n\r\n  const onTitle_clicked = () => {\r\n    onShowVideo(video);\r\n    setIsUpdateView(true);\r\n  }\r\n\r\n  return (\r\n    <ListGroup.Item onClick={onTitle_clicked} className=\"video-item\">\r\n      <ReactPlayer url={video.url} width={225} height={125} />\r\n      <Badge variant=\"success\">{video.name}</Badge>&nbsp;\r\n      {videoActive && videoActive.id === video.id &&\r\n        <Badge variant=\"warning\" className=\"icon\">\r\n          <i className=\"fa fa-pause\"></i>\r\n        </Badge>\r\n      }\r\n    </ListGroup.Item>\r\n  );\r\n}\r\n\r\nexport default VideoThumbnail;","F:\\Git\\WNC\\onlacademy-react\\src\\utils\\common.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddVideo\\index.jsx",["416"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport { create } from '../../../../services/video';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên bài giảng')\r\n});\r\n\r\nconst AddVideo = ({ courseId, user, onNewVideo, onShowAddSlide }) => {\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewVideo, setPreviewVideo] = useState('');\r\n  const [formData, setFormData] = useState(null);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n\r\n  const handleChooseFile = (e) => {\r\n    let file = e.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'video') {\r\n      setPreviewVideo('');\r\n      return;\r\n    }\r\n    setPreviewVideo(URL.createObjectURL(file));\r\n  }\r\n\r\n  const handleShowAddSlide = () => {\r\n    onShowAddSlide();\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await create(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Tạo bài giảng thành công' });\r\n            onNewVideo({ ...formData, id: res.data.id, rank: res.data.rank });\r\n            setIsLoading(false);\r\n            setPreviewVideo('');\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            await removeToFirebase({\r\n              fileName: formData.video_name,\r\n              folderUrl: `videos/courses/${courseId}`\r\n            })\r\n            alertMessage({ type: 'error', message: 'Tạo bài giảng thất bại' });\r\n            setIsLoading(false);\r\n            setPreviewVideo('');\r\n            reset();\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, courseId, onNewVideo, reset]);\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n\r\n    const form = { ...data };\r\n    delete form.video;\r\n\r\n    if (previewVideo === '') {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là video!' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    let videoName = `teacher-id-${user.id}-` + stringGenerate() + data.video[0].name;\r\n    const url = await uploadToFirebase({\r\n      file: data.video[0],\r\n      fileName: videoName,\r\n      folderUrl: `videos/courses/${courseId}`\r\n    });\r\n    if (url === null) {\r\n      alertMessage({ type: 'error', message: 'Tạo video bài giảng thất bại' });\r\n      setIsLoading(false);\r\n      setPreviewVideo('');\r\n      reset();\r\n      return;\r\n    }\r\n    form.url = url;\r\n    form.video_name = videoName;\r\n    form.courses_id = courseId;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Button variant=\"secondary\" className=\"btn-add-video\">\r\n        <i className=\"fa fa-video-camera\"></i> Thêm Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"outline-secondary\" className=\"btn-add-slide\" onClick={handleShowAddSlide}>\r\n        <i className=\"fa fa-file-pdf-o\"></i> Thêm Slide\r\n      </Button>\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-create\">\r\n        <Form.Group>\r\n          <Form.Label>Tên bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Video bài giảng</Form.Label><br />\r\n          <ReactPlayer url={previewVideo} width={225} height={125} className=\"previewVideo\" /><br />\r\n          <Form.File name=\"video\" onChange={handleChooseFile} ref={register} accept=\"video/*\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-create-lesson\" variant=\"outline-dark\">Thêm video</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddVideo;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditVideo\\index.jsx",["417"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport ReactPlayer from 'react-player';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport {\r\n  stringGenerate,\r\n  removeToFirebase,\r\n  uploadToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\nimport { update } from '../../../../services/video';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\n\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên bài giảng'),\r\n  rank: yup.number().required('Bạn chưa nhập thứ tự của bài giảng')\r\n});\r\n\r\nconst EditVideo = ({ videoUpdate, courseId, user, onUpdateVideo, onShowEditSlide }) => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isChooseFile, setIsChooseFile] = useState(false);\r\n  const [previewVideo, setPreviewVideo] = useState(null);\r\n  const [video, setVideo] = useState({\r\n    name: '',\r\n  });\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setPreviewVideo(videoUpdate.url);\r\n    setVideo(videoUpdate);\r\n  }, [videoUpdate])\r\n\r\n  const handleChooseVideo = (e) => {\r\n    let file = e.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'video') {\r\n      return;\r\n    }\r\n    setPreviewVideo(URL.createObjectURL(file));\r\n    setIsChooseFile(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessError;\r\n        const res = await update(formData, videoUpdate.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: videoUpdate.video_name,\r\n                folderUrl: `videos/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật bài giảng thành công' });\r\n            }\r\n            onUpdateVideo({ ...formData, id: videoUpdate.id });\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: formData.video_name,\r\n                folderUrl: `videos/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError) {\r\n              alertMessage({ type: 'error', message: 'Đã có lỗi xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Cập nhật bài giảng thất bại' });\r\n            }\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, videoUpdate, courseId, isChooseFile, onUpdateVideo])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.video;\r\n\r\n    let videoName = `teacher-id-${user.id}-` + stringGenerate();\r\n    if (isChooseFile) {\r\n      videoName += data.video[0].name;\r\n      const url = await uploadToFirebase({\r\n        file: data.video[0],\r\n        fileName: videoName,\r\n        folderUrl: `videos/courses/${courseId}`\r\n      })\r\n      if (url === null) {\r\n        alertMessage({ type: 'error', message: 'Cập nhật video bài giảng thất bại' });\r\n        setIsLoading(false);\r\n        setIsChooseFile(false);\r\n        return;\r\n      }\r\n      form.url = url;\r\n      form.video_name = videoName;\r\n    } else {\r\n      form.url = videoUpdate.url;\r\n      form.video_name = videoUpdate.video_name;\r\n    }\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  const handleShowEditSlide = () => {\r\n    onShowEditSlide();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n\r\n      <Button variant=\"secondary\" className=\"btn-edit-video\">\r\n        <i className=\"fa fa-video-camera\"></i> Chỉnh sửa Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"outline-secondary\" className=\"btn-edit-slide\" onClick={handleShowEditSlide}>\r\n        <i className=\"fa fa-file-pdf-o\"></i> Chỉnh sửa Slide\r\n      </Button>\r\n\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-edit\">\r\n        <Form.Group>\r\n          <Form.Label>Tên bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" defaultValue={video.name} name=\"name\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Thứ tự</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"number\" defaultValue={video.rank} name=\"rank\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.rank?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Video bài giảng</Form.Label><br />\r\n          <ReactPlayer url={previewVideo} width={225} height={125} /><br />\r\n          <Form.File name=\"video\" ref={register} onChange={handleChooseVideo} accept=\"video/*\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-edit-lesson\" variant=\"outline-dark\">Chỉnh sửa</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditVideo;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\AddSlide\\index.jsx",["418"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport './index.css';\r\nimport { create } from '../../../../services/slide';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên bài giảng')\r\n});\r\n\r\nconst AddSlide = ({ courseId, user, onNewSlide, onShowAddVideo }) => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [previewPdf, setPreviewPdf] = useState('');\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  const handleShowAddVideo = () => {\r\n    onShowAddVideo();\r\n  }\r\n\r\n  const handleChooseFile = (event) => {\r\n    let file = event.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[1] : null;\r\n    if (type !== 'pdf') {\r\n      setPreviewPdf('');\r\n      return;\r\n    }\r\n    setPreviewPdf(URL.createObjectURL(file));\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await create(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            alertMessage({ type: 'success', message: 'Tạo slide bài giảng thành công' });\r\n            onNewSlide({ ...formData, id: res.data.id });\r\n            setIsLoading(false);\r\n            setPreviewPdf('');\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            await removeToFirebase({\r\n              fileName: formData.slide_name,\r\n              folderUrl: `slides/courses/${courseId}`\r\n            });\r\n            alertMessage({ type: 'error', message: 'Tạo slide bài giảng thất bại' });\r\n            setIsLoading(false);\r\n            setPreviewPdf('');\r\n            reset();\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, courseId, onNewSlide, reset])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.slide;\r\n\r\n    if (previewPdf === '') {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là pdf' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n\r\n    let slideName = `teacher-id-${user.id}-` + stringGenerate() + data.slide[0].name;\r\n    const url = await uploadToFirebase({\r\n      file: data.slide[0],\r\n      fileName: slideName,\r\n      folderUrl: `slides/courses/${courseId}`\r\n    })\r\n    if (url === null) {\r\n      alertMessage({ type: 'error', message: 'Tạo slide bài giảng thất bại' });\r\n      setIsLoading(false);\r\n      setPreviewPdf('');\r\n      reset();\r\n      return;\r\n    }\r\n    form.url = url;\r\n    form.slide_name = slideName;\r\n    form.courses_id = courseId;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Button variant=\"outline-secondary\" className=\"btn-add-video\" onClick={handleShowAddVideo} >\r\n        <i className=\"fa fa-video-camera\"></i> Thêm Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"secondary\" className=\"btn-add-slide\">\r\n        <i className=\"fa fa-file-pdf-o\"></i> Thêm Slide\r\n      </Button>\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-create-slide\">\r\n        <Form.Group>\r\n          <Form.Label>Tên slide bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Nhập tên slide bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Slide bài giảng (.pdf)</Form.Label><br />\r\n          <embed width=\"191\" height=\"207\" src={previewPdf} type=\"application/pdf\" className=\"preview\"></embed>\r\n          <Form.File name=\"slide\" onChange={handleChooseFile} ref={register} accept=\"application/pdf\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-create-slide\" variant=\"outline-dark\">Thêm slide</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AddSlide;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\EditSlide\\index.jsx",["419"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport {\r\n  stringGenerate,\r\n  alertMessage,\r\n  uploadToFirebase,\r\n  removeToFirebase\r\n} from '../../../../utils/common';\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\n\r\nimport './index.css'\r\nimport { update } from '../../../../services/slide';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required('Bạn chưa nhập tên slide bài giảng')\r\n});\r\n\r\nconst EditSlide = ({ courseId, slideUpdate, user, onShowEditVideo, onUpdateSlide }) => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isChooseFile, setIsChooseFile] = useState(false);\r\n  const [previewSlide, setPreviewSlide] = useState(null);\r\n  const [slide, setSlide] = useState({\r\n    name: ''\r\n  });\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setPreviewSlide(slideUpdate.url);\r\n    setSlide(slideUpdate);\r\n  }, [slideUpdate])\r\n\r\n  const handleShowEditVideo = () => {\r\n    onShowEditVideo();\r\n  }\r\n\r\n\r\n  const handleChooseFile = (event) => {\r\n    let file = event.target.files[0] || null;\r\n    let type = file ? file.type.split('/')[1] : null;\r\n    if (type !== 'pdf') {\r\n      return;\r\n    }\r\n    setPreviewSlide(URL.createObjectURL(file));\r\n    setIsChooseFile(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessError;\r\n        const res = await update(formData, slideUpdate.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: slideUpdate.slide_name,\r\n                folderUrl: `slides/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật thành công.' });\r\n            }\r\n            onUpdateSlide({ ...formData, id: slideUpdate.id });\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            if (isChooseFile) {\r\n              isProcessError = await removeToFirebase({\r\n                fileName: formData.slide_name,\r\n                folderUrl: `slides/courses/${courseId}`\r\n              });\r\n              setIsChooseFile(false);\r\n            }\r\n            if (isProcessError === null) {\r\n              alertMessage({ type: 'error', message: 'Đã có lỗi xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Cập nhật thất bại.' });\r\n            }\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, slideUpdate, courseId, isChooseFile, onUpdateSlide])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n\r\n    const form = { ...data };\r\n    delete form.slide;\r\n\r\n    let slideName = `teacher-id-${user.id}-` + stringGenerate();\r\n    if (isChooseFile) {\r\n      slideName += data.slide[0].name;\r\n      const url = await uploadToFirebase({\r\n        file: data.slide[0],\r\n        fileName: slideName,\r\n        folderUrl: `slides/courses/${courseId}`\r\n      })\r\n      if (url === null) {\r\n        alertMessage({ type: 'error', message: 'Cập nhật slide bài giảng thất bại' });\r\n        setIsLoading(false);\r\n        setIsChooseFile(false);\r\n        return;\r\n      }\r\n      form.url = url;\r\n      form.slide_name = slideName;\r\n    } else {\r\n      form.url = slideUpdate.url;\r\n      form.slide_name = slideUpdate.slide_name;\r\n    }\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loading />}\r\n      <Button variant=\"outline-secondary\" className=\"btn-edit-video\" onClick={handleShowEditVideo} >\r\n        <i className=\"fa fa-video-camera\"></i> Chỉnh sửa Video\r\n      </Button>\r\n      &nbsp;\r\n      <Button variant=\"secondary\" className=\"btn-edit-slide\">\r\n        <i className=\"fa fa-file-pdf-o\"></i> Chỉnh sửa Slide\r\n      </Button>\r\n\r\n      <Form onSubmit={handleSubmit(onSubmit)} className=\"form-edit-slide\">\r\n        <Form.Group>\r\n          <Form.Label>Tên slide bài giảng</Form.Label>\r\n          <Form.Control size=\"sm\" type=\"text\" defaultValue={slide.name} name=\"name\" ref={register} placeholder=\"Nhập tên bài giảng\" />\r\n          <Form.Text className=\"text-muted message\">\r\n            <span className=\"msg\">{errors.name?.message}</span>\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group>\r\n          <Form.Label>Slide bài giảng</Form.Label><br />\r\n          <embed width=\"191\" height=\"207\" src={previewSlide} type=\"application/pdf\" className=\"preview\"></embed>\r\n          <Form.File name=\"slide\" onChange={handleChooseFile} ref={register} accept=\"application/pdf\" />\r\n        </Form.Group>\r\n\r\n        <Button type=\"submit\" className=\"btn-submit-edit-slide\" variant=\"outline-dark\">Chỉnh sửa</Button>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditSlide;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListVideo\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\ListSlide\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\SlideThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\slide.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Teacher\\components\\Edit\\index.jsx",["420","421","422"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Select from 'react-select';\r\nimport Loading from '../../../../components/Loading';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { getUser } from '../../../../services/user';\r\nimport { getInitCategories } from '../../../../services/category';\r\nimport { coursesOfTeacher, getCourseOfTeacherById, update, deleteCourse } from '../../../../services/course';\r\nimport {\r\n  stringGenerate,\r\n  uploadToFirebase,\r\n  removeToFirebase,\r\n  alertMessage\r\n} from '../../../../utils/common';\r\n\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport Swal from 'sweetalert2';\r\nimport './index.css';\r\n\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Bạn chưa nhập tiêu đề khóa học'),\r\n  name: yup.string().required('Bạn chưa nhập tên khóa học'),\r\n  sort_desc: yup.string().required('Bạn chưa nhập mô tả')\r\n});\r\n\r\nconst Edit = () => {\r\n  const { register, handleSubmit, errors } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isChooseCourse, setIsChooseCourse] = useState(false);\r\n  const [course, setCourse] = useState([]);\r\n  const optStatus = [\r\n    { value: 'completed', label: 'Hoàn thành' },\r\n    { value: 'pending', label: 'Chưa hoàn thành' }\r\n  ];\r\n  const [selectedStatus, setSelectedStatus] = useState({ value: null, label: null });\r\n\r\n  const [optCourses, setOptCourses] = useState([]);\r\n  const [selectedCourse, setSelectedCourse] = useState({ value: null, label: 'Chọn khóa học ...' });\r\n\r\n  const [optCategories, setOptCategories] = useState([]);\r\n  const [selectedCategories, setSelectedCategories] = useState({ value: null, label: null });\r\n\r\n  const [isChooseImgLarge, setIsChooseImgLarge] = useState(false);\r\n  const [isChooseImgSmall, setIsChooseImgSmall] = useState(false);\r\n  const [previewImgLarge, setPreviewImgLarge] = useState('');\r\n  const [previewImgSmall, setPreviewImgSmall] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [user, setUser] = useState({\r\n    id: null,\r\n    name: null,\r\n  });\r\n\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const [isDelete, setIsDelete] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      let res = await getUser();\r\n      if (res.state) {\r\n        setUser(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    const fetchCourses = async () => {\r\n      let result = await coursesOfTeacher();\r\n      if (result.state) {\r\n        let initial = [];\r\n        let remap = result.data.reduce((accumulator, currentValue) => {\r\n          accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n          return accumulator;\r\n        }, initial);\r\n        setOptCourses(remap)\r\n      } else {\r\n        if (result.auth !== undefined && result.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    const fetchCategories = async () => {\r\n      let result = await getInitCategories();\r\n      let initial = [];\r\n      let remap = result.data.reduce((accumulator, currentValue) => {\r\n        accumulator.push({ value: currentValue.id, label: currentValue.name });\r\n        return accumulator;\r\n      }, initial);\r\n      setOptCategories(remap);\r\n    }\r\n\r\n    fetchUser();\r\n    fetchCourses();\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const handleFile = (file) => {\r\n    let type = file ? file.type.split('/')[0] : null;\r\n    if (type !== 'image') {\r\n      return null;\r\n    }\r\n    let path = URL.createObjectURL(file);\r\n    return path;\r\n  }\r\n\r\n  const handleChooseImaSmall = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n    } else {\r\n      setIsChooseImgSmall(true);\r\n      setPreviewImgSmall(path);\r\n    }\r\n  }\r\n\r\n  const handleChooseImaLarge = (event) => {\r\n    let path = handleFile(event.target.files[0]);\r\n    if (path === null) {\r\n      alertMessage({ type: 'warning', message: 'Vui lòng chọn file là ảnh!' });\r\n    } else {\r\n      setIsChooseImgLarge(true);\r\n      setPreviewImgLarge(path);\r\n    }\r\n  }\r\n\r\n  const handleSelectChangeCourse = async (selected) => {\r\n    setIsChooseCourse(true);\r\n    setSelectedCourse(selected);\r\n    let res = await getCourseOfTeacherById(selected.value);\r\n    if (!res.state) {\r\n      if (res.auth !== undefined && res.auth.authenticated === false) {\r\n        dispatch({\r\n          type: LOGOUT,\r\n          payload: {\r\n            isLogged: false\r\n          }\r\n        });\r\n        return;\r\n      }\r\n    }\r\n    setCourse(res.data);\r\n    let category = optCategories.filter(cat => cat.value === res.data.categories_id);\r\n    setSelectedCategories(category[0]);\r\n    setDescription(res.data.detail_desc);\r\n    setPreviewImgSmall(res.data.img);\r\n    setPreviewImgLarge(res.data.img_large);\r\n    let tus = optStatus.filter(sts => sts.value === res.data.status);\r\n    setSelectedStatus(tus[0]);\r\n  }\r\n\r\n  const handleSelectChangeCategories = (selected) => {\r\n    setSelectedCategories(selected);\r\n  }\r\n\r\n  const handleSelectChangeStatus = (selected) => {\r\n    setSelectedStatus(selected);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        let isProcessErrorSmall, isProcessErrorLarge;\r\n        let res = await update(formData, course.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            if (isChooseImgSmall) {\r\n              isProcessErrorSmall = await removeToFirebase({\r\n                fileName: course.img_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgSmall(false);\r\n            }\r\n            if (isChooseImgLarge) {\r\n              isProcessErrorLarge = await removeToFirebase({\r\n                fileName: course.img_large_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgLarge(false);\r\n            }\r\n            if (isProcessErrorSmall === null || isProcessErrorLarge === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'success', message: 'Cập nhật thành công.' });\r\n            }\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsSubmit(false);\r\n            if (isChooseImgSmall) {\r\n              isProcessErrorSmall = await removeToFirebase({\r\n                fileName: formData.img_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgSmall(false);\r\n            }\r\n            if (isChooseImgLarge) {\r\n              isProcessErrorLarge = await removeToFirebase({\r\n                fileName: formData.img_large_name,\r\n                folderUrl: `images/courses/teacher-id-${user.id}`\r\n              });\r\n              setIsChooseImgLarge(false);\r\n            }\r\n            if (isProcessErrorSmall === null || isProcessErrorLarge === null) {\r\n              alertMessage({ type: 'warning', message: 'Đã có một lỗi nhỏ xảy ra trong quá trình cập nhật' });\r\n            } else {\r\n              alertMessage({ type: 'error', message: 'Cập nhật thất bại.' });\r\n            }\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSubmit, formData, course, user, isChooseImgSmall, isChooseImgLarge])\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const form = { ...data };\r\n    delete form.large_image;\r\n    delete form.small_image;\r\n\r\n    let imgName = stringGenerate();\r\n    let imgLargeName = stringGenerate();\r\n    if (isChooseImgSmall) {\r\n      imgName += data.small_image[0].name;\r\n      let url = await uploadToFirebase({\r\n        file: data.small_image[0],\r\n        fileName: imgName,\r\n        folderUrl: `images/courses/teacher-id-${user.id}`\r\n      });\r\n      if (url === null) {\r\n        alertMessage({ type: 'warning', message: 'Có lỗi xảy ra trong quá trình cập nhật!' });\r\n        setIsChooseImgSmall(false);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      form.img = url;\r\n      form.img_name = imgName;\r\n    }\r\n\r\n    if (isChooseImgLarge) {\r\n      imgLargeName += data.large_image[0].name;\r\n      let url = await uploadToFirebase({\r\n        file: data.large_image[0],\r\n        fileName: imgLargeName,\r\n        folderUrl: `images/courses/teacher-id-${user.id}`\r\n      });\r\n      if (url === null) {\r\n        alertMessage({ type: 'warning', message: 'Có lỗi xảy ra trong quá trình cập nhật!' });\r\n        setIsChooseImgLarge(false);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      form.img_large = url;\r\n      form.img_large_name = imgLargeName;\r\n    }\r\n\r\n    form.detail_desc = description;\r\n    form.status = selectedStatus.value;\r\n    form.categories_id = selectedCategories.value;\r\n    // form.price = +data.price;\r\n    // form.price_promo = +data.price_promo;\r\n\r\n    setFormData(form);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  const onRemoveCourse_clicked = async () => {\r\n    let resToast = await Swal.fire({\r\n      title: 'Bạn có muốn xóa khóa học này ?',\r\n      showCancelButton: true,\r\n      confirmButtonText: `Xóa`,\r\n    });\r\n\r\n    if (resToast.isConfirmed) {\r\n      setIsLoading(true);\r\n      setIsDelete(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isDelete) {\r\n      const actionDelete = async () => {\r\n        let res = await deleteCourse(course.id);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsDelete(false);\r\n            await removeToFirebase({\r\n              fileName: res.data.course.img_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            await removeToFirebase({\r\n              fileName: res.data.course.img_large_name,\r\n              folderUrl: `images/courses/teacher-id-${user.id}`\r\n            });\r\n            if (res.data.videos.length > 0) {\r\n              res.data.videos.map(async (video) => {\r\n                await removeToFirebase({\r\n                  fileName: video.video_name,\r\n                  folderUrl: `videos/courses/${course.id}`\r\n                })\r\n              });\r\n            }\r\n            if (res.data.slides.length > 0) {\r\n              res.data.slides.map(async (slide) => {\r\n                await removeToFirebase({\r\n                  fileName: slide.slide_name,\r\n                  folderUrl: `slides/courses/${course.id}`\r\n                })\r\n              });\r\n            }\r\n            alertMessage({ type: 'success', message: 'Xóa khóa học thành công.' });\r\n            setIsLoading(false);\r\n          } else {\r\n            setIsDelete(false);\r\n            alertMessage({ type: 'error', message: 'Không thể xóa khóa học này.' });\r\n            setIsLoading(false);\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionDelete();\r\n    }\r\n    return () => mounted = false;\r\n\r\n  }, [isDelete, course, user]);\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={9} xs={12} className=\"col-form-edit\">\r\n            <Form.Group>\r\n              <Form.Label>Khóa học</Form.Label>\r\n              <Select\r\n                value={selectedCourse}\r\n                onChange={handleSelectChangeCourse}\r\n                isClearable={false}\r\n                isSearchable={true}\r\n                options={optCourses}\r\n              />\r\n            </Form.Group>\r\n\r\n            {isChooseCourse &&\r\n              <>\r\n                <Form.Group>\r\n                  <Form.Label>Trạng thái</Form.Label>\r\n                  <Select\r\n                    value={selectedStatus}\r\n                    onChange={handleSelectChangeStatus}\r\n                    isClearable={false}\r\n                    isSearchable={true}\r\n                    options={optStatus}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Lĩnh vực</Form.Label>\r\n                  <Select\r\n                    value={selectedCategories}\r\n                    onChange={handleSelectChangeCategories}\r\n                    isClearable={false}\r\n                    isSearchable={true}\r\n                    options={optCategories}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Tiêu đề</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"text\" name=\"title\" defaultValue={course.title} ref={register} placeholder=\"Nhập tiêu đề\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.title?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Tên khóa học</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"text\" name=\"name\" defaultValue={course.name} ref={register} placeholder=\"Nhập tên khóa học\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.name?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                  <Form.Label>Mô tả ngắn</Form.Label>\r\n                  <Form.Control as=\"textarea\" name=\"sort_desc\" defaultValue={course.sort_desc} ref={register} rows={3} />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.sort_desc?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Mô tả chi tiết</Form.Label>\r\n                  <ReactQuill\r\n                    theme=\"snow\"\r\n                    name=\"detail_desc\"\r\n                    style={{ height: '200px', marginBottom: '35px' }}\r\n                    value={description}\r\n                    onChange={setDescription}\r\n                    ref={register} />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.detail_desc?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Ảnh nhỏ</Form.Label><br />\r\n                  <Image className=\"avatar\" src={previewImgSmall} roundedCircle />\r\n                  <Form.File name=\"small_image\" onChange={handleChooseImaSmall} ref={register} accept=\"image/*\" />\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Ảnh lớn</Form.Label><br />\r\n                  <Image className=\"avatar\" src={previewImgLarge} roundedCircle />\r\n                  <Form.File name=\"large_image\" onChange={handleChooseImaLarge} ref={register} accept=\"image/*\" />\r\n                </Form.Group>\r\n\r\n                {/* <Form.Group>\r\n                  <Form.Label>Giá</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"number\" name=\"price\" defaultValue={course.price} ref={register} placeholder=\"Nhập giá khóa học\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.price?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>Giá khuyến mãi (nếu có)</Form.Label>\r\n                  <Form.Control size=\"sm\" type=\"number\" name=\"price_promo\" defaultValue={course.price_promo} ref={register} placeholder=\"Nhập giá khóa học\" />\r\n                  <Form.Text className=\"text-muted message\">\r\n                    <span className=\"msg\">{errors.price_promo?.message}</span>\r\n                  </Form.Text>\r\n                </Form.Group> */}\r\n\r\n                <Button type=\"submit\" className=\"btn-edit\" variant=\"outline-dark\">Chỉnh sửa khóa học</Button>\r\n              </>\r\n            }\r\n          </Col>\r\n          <Col lg={3} xs={12} className=\"col-btn-remove\">\r\n            {(course.qty_student_registed === 0 || course.qty_student_registed === null) && isChooseCourse &&\r\n              <Button className=\"btn-remove\" variant=\"outline-danger\" onClick={onRemoveCourse_clicked}>\r\n                <i className=\"fa fa-trash\"></i> Xóa khóa học\r\n              </Button>\r\n            }\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Edit;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListVideo\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\ListSlide\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\SlideThumbnail\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Document\\components\\Slide\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\lovelist.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\Comment\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\services\\feedback.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Course\\components\\RecommendItem\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\components\\Menu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\components\\Content\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\layouts\\Admin\\components\\ItemMenu\\index.jsx",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Students\\index.jsx",["423","424","425"],"import React, { forwardRef, useEffect, useState, useContext } from 'react';\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { adminGetStudents, adminUpdateStudent } from '../../../../services/admin';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst Students = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [columns, setColumns] = useState([\r\n    {\r\n      editComponent: props => (\r\n        <input\r\n          type=\"text\"\r\n          value={props.value}\r\n          onChange={e => props.onChange(e.target.value)}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      title: 'Ảnh đại diện',\r\n      field: 'img_url',\r\n      render: rowData => <img src={rowData.img_url} style={{ width: 85, height: 100 }} />,\r\n      editable: 'never'\r\n    },\r\n    { title: 'Họ tên', field: 'full_name', editable: 'never' },\r\n    { title: 'Tài khoản', field: 'username', editable: 'never' },\r\n    { title: 'Điện thoại', field: 'phone', editable: 'never' },\r\n    { title: 'Email', field: 'email', editable: 'never' },\r\n    { title: 'Địa chỉ', field: 'address', editable: 'never' },\r\n    {\r\n      title: 'Quyền truy cập',\r\n      field: 'active',\r\n      lookup: { 0: 'Không', 1: 'Có' }\r\n    }\r\n  ]);\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      const res = await adminGetStudents();\r\n      if (res.state) {\r\n        setData(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n    fetchUsers()\r\n  }, [])\r\n\r\n  return (\r\n    <MaterialTable\r\n      icons={tableIcons}\r\n      columns={columns}\r\n      data={data}\r\n      title=\"DANH SÁCH HỌC VIÊN\"\r\n      editable={{\r\n        onRowUpdate: async (newData, oldData) => {\r\n          let active = Boolean(+newData.active);\r\n          const res = await adminUpdateStudent({ active }, newData.id);\r\n          if (res.state) {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = newData;\r\n            setData([...dataUpdate]);\r\n            alertMessage({ type: 'success', message: 'Cập nhật thành công' });\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Cập nhật thất bại' });\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Students;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Teachers\\index.jsx",["426","427","428"],"import React, { forwardRef, useEffect, useState, useContext } from 'react';\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { adminGetTeachers, adminUpdateTeacher, } from '../../../../services/admin';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst Teachers = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [columns, setColumns] = useState([\r\n    {\r\n      editComponent: props => (\r\n        <input\r\n          type=\"text\"\r\n          value={props.value}\r\n          onChange={e => props.onChange(e.target.value)}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      title: 'Ảnh đại diện',\r\n      field: 'img_url',\r\n      render: rowData => <img src={rowData.img_url} style={{ width: 85, height: 100 }} />,\r\n      editable: 'never'\r\n    },\r\n    { title: 'Họ tên', field: 'full_name', editable: 'never' },\r\n    { title: 'Tài khoản', field: 'username' },\r\n    { title: 'Điện thoại', field: 'phone' },\r\n    { title: 'Email', field: 'email' },\r\n    { title: 'Địa chỉ', field: 'address', editable: 'never' },\r\n    {\r\n      title: 'Quyền truy cập',\r\n      field: 'active',\r\n      lookup: { 0: 'Không', 1: 'Có' }\r\n    }\r\n  ]);\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchTeachers = async () => {\r\n      const res = await adminGetTeachers();\r\n      if (res.state) {\r\n        console.log(res);\r\n        setData(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n    fetchTeachers()\r\n  }, [])\r\n\r\n  return (\r\n    <MaterialTable\r\n      icons={tableIcons}\r\n      columns={columns}\r\n      data={data}\r\n      title=\"DANH SÁCH GIẢNG VIÊN\"\r\n      editable={{\r\n        onRowUpdate: async (newData, oldData) => {\r\n          let form = {\r\n            active: Boolean(+newData.active),\r\n            username: newData.username,\r\n            phone: newData.phone,\r\n            email: newData.email\r\n          }\r\n          const res = await adminUpdateTeacher(form, newData.id);\r\n          if (res.state) {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = newData;\r\n            setData([...dataUpdate]);\r\n            alertMessage({ type: 'success', message: 'Cập nhật thành công' });\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Cập nhật thất bại' });\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Teachers;","F:\\Git\\WNC\\onlacademy-react\\src\\services\\admin.js",[],"F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Courses\\index.jsx",["429","430","431","432"],"import React, { forwardRef, useEffect, useState, useContext } from 'react';\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { adminGetCourses, adminUpdateCourse } from '../../../../services/admin';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nconst Courses = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [columns, setColumns] = useState([\r\n    {\r\n      editComponent: props => (\r\n        <input\r\n          type=\"text\"\r\n          value={props.value}\r\n          onChange={e => props.onChange(e.target.value)}\r\n        />\r\n      )\r\n    },\r\n    {\r\n      title: 'Ảnh nhỏ',\r\n      field: 'img',\r\n      render: rowData => <img src={rowData.img} style={{ width: 85, height: 100 }} />,\r\n      editable: 'never'\r\n    },\r\n    {\r\n      title: 'Ảnh lớn',\r\n      field: 'img_large',\r\n      render: rowData => <img src={rowData.img_large} style={{ width: 85, height: 100 }} />,\r\n      editable: 'never'\r\n    },\r\n    { title: 'Tiêu đề', field: 'title', editable: 'never' },\r\n    { title: 'Tên khóa học', field: 'name', editable: 'never' },\r\n    { title: 'Giáo viên', field: 'teacher', editable: 'never' },\r\n    { title: 'Số lượng học viên', field: 'qty_student_registed', editable: 'never' },\r\n    { title: 'Giá', field: 'price' },\r\n    { title: 'Giá khuyến mãi', field: 'price_promo' },\r\n    {\r\n      title: 'Trạng thái',\r\n      field: 'status',\r\n      lookup: { 'completed': 'Hoàn thành', 'pending': 'Chưa hoàn thành' }\r\n    },\r\n    {\r\n      title: 'Hoạt động',\r\n      field: 'active',\r\n      lookup: { 0: 'Không', 1: 'Có' }\r\n    }\r\n  ]);\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCourses = async () => {\r\n      const res = await adminGetCourses();\r\n      if (res.state) {\r\n        setData(res.data);\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n    fetchCourses();\r\n  }, [])\r\n\r\n  return (\r\n    <MaterialTable\r\n      icons={tableIcons}\r\n      columns={columns}\r\n      data={data}\r\n      title=\"DANH SÁCH KHÓA HỌC\"\r\n      editable={{\r\n        onRowUpdate: async (newData, oldData) => {\r\n          let form = {\r\n            active: Boolean(+newData.active),\r\n            price: +newData.price,\r\n            price_promo: +newData.price_promo,\r\n            status: newData.status\r\n          };\r\n          const res = await adminUpdateCourse(form, newData.id);\r\n          if (res.state) {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = newData;\r\n            setData([...dataUpdate]);\r\n            alertMessage({ type: 'success', message: 'Cập nhật thành công' });\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Cập nhật thất bại' });\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n          return;\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Courses;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\CreateTeacher\\index.jsx",["433"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Loading from '../../../../components/Loading';\r\nimport { alertMessage } from '../../../../utils/common';\r\nimport { adminCreateTeacher } from '../../../../services/admin';\r\n\r\nimport './index.css';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport AppContext from '../../../../AppContext';\r\n\r\nconst schema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required('Tài khoản là bắt buộc'),\r\n  password: yup\r\n    .string()\r\n    .required('Mật khẩu là bắt buộc')\r\n    .min(8, 'Mật khẩu phải từ 8 kí tự trở lên'),\r\n  email: yup\r\n    .string()\r\n    .required('Mật khẩu là bắt buộc')\r\n    .email('Không đúng định dạng')\r\n});\r\n\r\nconst CreateTeacher = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await adminCreateTeacher(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            setIsLoading(false);\r\n            alertMessage({ type: 'success', message: 'Tạo tài khoản thành công.' });\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            setIsLoading(false);\r\n            alertMessage({ type: 'error', message: res.data.message })\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n  }, [isSubmit, formData, reset]);\r\n\r\n  const onSubmit = (data) => {\r\n    setIsLoading(true);\r\n    setFormData(data);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={7} xs={12} className=\"col-form-create-teacher\">\r\n            <Form.Group>\r\n              <Form.Label>Tài khoản</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"username\" ref={register} placeholder=\"Tài khoản\" autoFocus />\r\n              <Form.Text className=\"text-muted error-message\">\r\n                <span className=\"msg\">{errors.username?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Mật khẩu</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"password\" name=\"password\" ref={register} placeholder=\"Mật khẩu\" />\r\n              <Form.Text className=\"text-muted error-message\">\r\n                <span className=\"msg\">{errors.password?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"email\" name=\"email\" ref={register} placeholder=\"teacher@mail.com\" />\r\n              <Form.Text className=\"text-muted error-message\">\r\n                <span className=\"msg\">{errors.email?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Button type=\"submit\" variant=\"outline-secondary btn-create-teacher\">Tạo tài khoản</Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CreateTeacher;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\Categories\\index.jsx",["434"],"import React, { forwardRef, useEffect, useState, useContext } from 'react';\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { adminGetCategories, adminUpdateCategory } from '../../../../services/admin';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst tableIcons = {\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\nconst Categories = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  const [columns, setColumns] = useState([\r\n    {\r\n      editComponent: props => (\r\n        <input\r\n          type=\"text\"\r\n          value={props.value}\r\n          onChange={e => props.onChange(e.target.value)}\r\n        />\r\n      )\r\n    },\r\n    { title: 'Tên lĩnh vực', field: 'name' },\r\n    { title: 'Số lượng khóa học', field: 'qty_course', editable: 'never' }\r\n  ]);\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      const res = await adminGetCategories();\r\n      console.log('res categories', res);\r\n      setData(res.data);\r\n    }\r\n    fetchCategories();\r\n  }, [])\r\n\r\n  return (\r\n    <MaterialTable\r\n      icons={tableIcons}\r\n      columns={columns}\r\n      data={data}\r\n      title=\"DANH SÁCH LĨNH VỰC\"\r\n      editable={{\r\n        onRowUpdate: async (newData, oldData) => {\r\n          let form = {\r\n            name: newData.name\r\n          }\r\n          const res = await adminUpdateCategory(form, newData.id);\r\n          if (res.state) {\r\n            const dataUpdate = [...data];\r\n            const index = oldData.tableData.id;\r\n            dataUpdate[index] = newData;\r\n            setData([...dataUpdate]);\r\n            alertMessage({ type: 'success', message: 'Cập nhật thành công' });\r\n          } else {\r\n            alertMessage({ type: 'error', message: 'Cập nhật thất bại' });\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Categories;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\Admin\\components\\CreateCategory\\index.jsx",["435","436"],"import React, { forwardRef, useEffect, useState, useContext } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Loading from '../../../../components/Loading';\r\nimport { alertMessage } from '../../../../utils/common';\r\nimport { adminCreateCategory } from '../../../../services/admin';\r\n\r\nimport './index.css';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport AppContext from '../../../../AppContext';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required('Tên lĩnh vực là bắt buộc')\r\n});\r\n\r\nconst CreateCategories = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isSubmit, setIsSubmit] = useState(false);\r\n  const [formData, setFormData] = useState(null);\r\n  const { register, handleSubmit, errors, reset } = useForm({\r\n    resolver: yupResolver(schema)\r\n  });\r\n  const { dispatch } = useContext(AppContext);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSubmit) {\r\n      const submitForm = async () => {\r\n        const res = await adminCreateCategory(formData);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSubmit(false);\r\n            setIsLoading(false);\r\n            alertMessage({ type: 'success', message: 'Tạo lĩnh vực thành công.' });\r\n            reset();\r\n          } else {\r\n            setIsSubmit(false);\r\n            setIsLoading(false);\r\n            alertMessage({ type: 'error', message: res.data.message })\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      submitForm();\r\n    }\r\n\r\n    return () => mounted = false;\r\n  }, [isSubmit, formData, reset])\r\n\r\n  const onSubmit = (data) => {\r\n    setIsLoading(true);\r\n    setFormData(data);\r\n    setIsSubmit(true);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      {isLoading && <Loading />}\r\n      <Form onSubmit={handleSubmit(onSubmit)}>\r\n        <Row>\r\n          <Col lg={7} xs={12} className=\"col-form-create-category\">\r\n            <Form.Group>\r\n              <Form.Label>Tên lĩnh vực</Form.Label>\r\n              <Form.Control size=\"sm\" type=\"text\" name=\"name\" ref={register} placeholder=\"Tên lĩnh vực\" autoFocus />\r\n              <Form.Text className=\"text-muted error-message\">\r\n                <span className=\"msg\">{errors.name?.message}</span>\r\n              </Form.Text>\r\n            </Form.Group>\r\n            <Button type=\"submit\" variant=\"outline-secondary btn-create-category\">Tạo lĩnh vực</Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default CreateCategories;","F:\\Git\\WNC\\onlacademy-react\\src\\pages\\User\\components\\LoveList\\index.jsx",["437","438"],"import React, { useEffect, useContext, useState } from 'react';\r\n\r\nimport Course from '../Course';\r\n\r\nimport AppContext from '../../../../AppContext';\r\nimport { LOGOUT } from '../../../../AppTypes';\r\nimport { remove } from '../../../../services/lovelist';\r\nimport { getLoveList } from '../../../../services/lovelist';\r\nimport { alertMessage } from '../../../../utils/common';\r\n\r\nconst LoveList = () => {\r\n  const { dispatch } = useContext(AppContext);\r\n  const [isSub, setIsSub] = useState(false);\r\n  const [userCourses, setUserCourses] = useState([]);\r\n  const [loveIds, setLoveIds] = useState([]);\r\n  const [userCourseStarId, setUserCourseStarId] = useState(null);\r\n  const isExist = userCourses.length > 0;\r\n\r\n  useEffect(() => {\r\n    const fetchLoveList = async () => {\r\n      let res = await getLoveList();\r\n      if (res.state) {\r\n        setUserCourses(res.data);\r\n        setLoveIds(res.data.map(item => item.id));\r\n      } else {\r\n        if (res.auth !== undefined && res.auth.authenticated === false) {\r\n          dispatch({\r\n            type: LOGOUT,\r\n            payload: {\r\n              isLogged: false\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n    fetchLoveList();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    if (isSub) {\r\n      const actionSubStar = async () => {\r\n        let res = await remove(userCourseStarId);\r\n        if (mounted) {\r\n          if (res.state) {\r\n            setIsSub(false);\r\n            let newLoveList = loveIds.filter(id => id !== userCourseStarId);\r\n            setLoveIds(newLoveList);\r\n            let newCourses = userCourses.filter(item => item.id !== userCourseStarId);\r\n            setUserCourses(newCourses);\r\n            alertMessage({ type: 'success', message: 'Xóa khỏi danh sách yêu thích thành công' })\r\n          } else {\r\n            setIsSub(false);\r\n            alertMessage({ type: 'error', message: 'Xóa khỏi danh sách yêu thích thất bại' })\r\n            if (res.auth !== undefined && res.auth.authenticated === false) {\r\n              dispatch({\r\n                type: LOGOUT,\r\n                payload: {\r\n                  isLogged: false\r\n                }\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n      actionSubStar();\r\n    }\r\n\r\n    return () => mounted = false;\r\n\r\n  }, [isSub, userCourseStarId, loveIds, userCourses])\r\n\r\n  const handleClickSubStar = (userCourse) => {\r\n    setUserCourseStarId(userCourse.courses_id);\r\n    setIsSub(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      { isExist ?\r\n        userCourses.map((userCourse, idx) =>\r\n          <Course key={idx} userCourse={userCourse} onClickSubStart={handleClickSubStar} loveIds={loveIds} />\r\n        )\r\n        :\r\n        <div>Không có khóa học yêu thích nào được thêm</div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoveList;",{"ruleId":"439","replacedBy":"440"},{"ruleId":"441","replacedBy":"442"},{"ruleId":"443","severity":1,"message":"444","line":35,"column":6,"nodeType":"445","endLine":35,"endColumn":8,"suggestions":"446"},{"ruleId":"439","replacedBy":"447"},{"ruleId":"441","replacedBy":"448"},{"ruleId":"443","severity":1,"message":"444","line":39,"column":6,"nodeType":"445","endLine":39,"endColumn":28,"suggestions":"449"},{"ruleId":"443","severity":1,"message":"444","line":30,"column":6,"nodeType":"445","endLine":30,"endColumn":8,"suggestions":"450"},{"ruleId":"443","severity":1,"message":"451","line":42,"column":6,"nodeType":"445","endLine":42,"endColumn":16,"suggestions":"452"},{"ruleId":"443","severity":1,"message":"453","line":60,"column":6,"nodeType":"445","endLine":60,"endColumn":21,"suggestions":"454"},{"ruleId":"443","severity":1,"message":"455","line":11,"column":6,"nodeType":"445","endLine":11,"endColumn":42,"suggestions":"456"},{"ruleId":"443","severity":1,"message":"444","line":71,"column":6,"nodeType":"445","endLine":71,"endColumn":8,"suggestions":"457"},{"ruleId":"443","severity":1,"message":"444","line":126,"column":6,"nodeType":"445","endLine":126,"endColumn":41,"suggestions":"458"},{"ruleId":"443","severity":1,"message":"444","line":66,"column":6,"nodeType":"445","endLine":66,"endColumn":8,"suggestions":"459"},{"ruleId":"443","severity":1,"message":"444","line":96,"column":6,"nodeType":"445","endLine":96,"endColumn":33,"suggestions":"460"},{"ruleId":"461","severity":1,"message":"462","line":9,"column":10,"nodeType":"463","messageId":"464","endLine":9,"endColumn":14},{"ruleId":"461","severity":1,"message":"465","line":13,"column":11,"nodeType":"463","messageId":"464","endLine":13,"endColumn":16},{"ruleId":"443","severity":1,"message":"444","line":60,"column":6,"nodeType":"445","endLine":60,"endColumn":8,"suggestions":"466"},{"ruleId":"443","severity":1,"message":"444","line":90,"column":6,"nodeType":"445","endLine":90,"endColumn":40,"suggestions":"467"},{"ruleId":"443","severity":1,"message":"444","line":123,"column":6,"nodeType":"445","endLine":123,"endColumn":40,"suggestions":"468"},{"ruleId":"443","severity":1,"message":"444","line":60,"column":6,"nodeType":"445","endLine":60,"endColumn":35,"suggestions":"469"},{"ruleId":"443","severity":1,"message":"470","line":57,"column":6,"nodeType":"445","endLine":57,"endColumn":8,"suggestions":"471"},{"ruleId":"443","severity":1,"message":"444","line":81,"column":6,"nodeType":"445","endLine":81,"endColumn":8,"suggestions":"472"},{"ruleId":"443","severity":1,"message":"444","line":127,"column":6,"nodeType":"445","endLine":127,"endColumn":39,"suggestions":"473"},{"ruleId":"443","severity":1,"message":"453","line":88,"column":6,"nodeType":"445","endLine":88,"endColumn":8,"suggestions":"474"},{"ruleId":"443","severity":1,"message":"444","line":37,"column":6,"nodeType":"445","endLine":37,"endColumn":27,"suggestions":"475"},{"ruleId":"443","severity":1,"message":"444","line":91,"column":6,"nodeType":"445","endLine":91,"endColumn":55,"suggestions":"476"},{"ruleId":"443","severity":1,"message":"444","line":111,"column":6,"nodeType":"445","endLine":111,"endColumn":78,"suggestions":"477"},{"ruleId":"443","severity":1,"message":"444","line":89,"column":6,"nodeType":"445","endLine":89,"endColumn":55,"suggestions":"478"},{"ruleId":"443","severity":1,"message":"444","line":114,"column":6,"nodeType":"445","endLine":114,"endColumn":78,"suggestions":"479"},{"ruleId":"443","severity":1,"message":"444","line":125,"column":6,"nodeType":"445","endLine":125,"endColumn":8,"suggestions":"480"},{"ruleId":"443","severity":1,"message":"444","line":256,"column":6,"nodeType":"445","endLine":256,"endColumn":76,"suggestions":"481"},{"ruleId":"443","severity":1,"message":"444","line":376,"column":6,"nodeType":"445","endLine":376,"endColumn":30,"suggestions":"482"},{"ruleId":"461","severity":1,"message":"483","line":48,"column":19,"nodeType":"463","messageId":"464","endLine":48,"endColumn":29},{"ruleId":"484","severity":1,"message":"485","line":61,"column":26,"nodeType":"486","endLine":61,"endColumn":90},{"ruleId":"443","severity":1,"message":"444","line":95,"column":6,"nodeType":"445","endLine":95,"endColumn":8,"suggestions":"487"},{"ruleId":"461","severity":1,"message":"483","line":48,"column":19,"nodeType":"463","messageId":"464","endLine":48,"endColumn":29},{"ruleId":"484","severity":1,"message":"485","line":61,"column":26,"nodeType":"486","endLine":61,"endColumn":90},{"ruleId":"443","severity":1,"message":"444","line":96,"column":6,"nodeType":"445","endLine":96,"endColumn":8,"suggestions":"488"},{"ruleId":"461","severity":1,"message":"483","line":48,"column":19,"nodeType":"463","messageId":"464","endLine":48,"endColumn":29},{"ruleId":"484","severity":1,"message":"485","line":61,"column":26,"nodeType":"486","endLine":61,"endColumn":86},{"ruleId":"484","severity":1,"message":"485","line":67,"column":26,"nodeType":"486","endLine":67,"endColumn":92},{"ruleId":"443","severity":1,"message":"444","line":107,"column":6,"nodeType":"445","endLine":107,"endColumn":8,"suggestions":"489"},{"ruleId":"443","severity":1,"message":"444","line":72,"column":6,"nodeType":"445","endLine":72,"endColumn":33,"suggestions":"490"},{"ruleId":"461","severity":1,"message":"483","line":47,"column":19,"nodeType":"463","messageId":"464","endLine":47,"endColumn":29},{"ruleId":"461","severity":1,"message":"491","line":1,"column":17,"nodeType":"463","messageId":"464","endLine":1,"endColumn":27},{"ruleId":"443","severity":1,"message":"444","line":64,"column":6,"nodeType":"445","endLine":64,"endColumn":33,"suggestions":"492"},{"ruleId":"443","severity":1,"message":"444","line":37,"column":6,"nodeType":"445","endLine":37,"endColumn":8,"suggestions":"493"},{"ruleId":"443","severity":1,"message":"444","line":71,"column":6,"nodeType":"445","endLine":71,"endColumn":53,"suggestions":"494"},"no-native-reassign",["495"],"no-negated-in-lhs",["496"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["497"],["495"],["496"],["498"],["499"],"React Hook useEffect has missing dependencies: 'from' and 'history'. Either include them or remove the dependency array.",["500"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["501"],"React Hook useEffect has a missing dependency: 'forcePage'. Either include it or remove the dependency array.",["502"],["503"],["504"],["505"],["506"],"no-unused-vars","'USER' is defined but never used.","Identifier","unusedVar","'store' is assigned a value but never used.",["507"],["508"],["509"],["510"],"React Hook useEffect has missing dependencies: 'courseId', 'dispatch', and 'history'. Either include them or remove the dependency array.",["511"],["512"],["513"],["514"],["515"],["516"],["517"],["518"],["519"],["520"],["521"],["522"],"'setColumns' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["523"],["524"],["525"],["526"],"'forwardRef' is defined but never used.",["527"],["528"],["529"],"no-global-assign","no-unsafe-negation",{"desc":"530","fix":"531"},{"desc":"532","fix":"533"},{"desc":"530","fix":"534"},{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"530","fix":"541"},{"desc":"542","fix":"543"},{"desc":"530","fix":"544"},{"desc":"545","fix":"546"},{"desc":"530","fix":"547"},{"desc":"548","fix":"549"},{"desc":"550","fix":"551"},{"desc":"552","fix":"553"},{"desc":"554","fix":"555"},{"desc":"530","fix":"556"},{"desc":"557","fix":"558"},{"desc":"559","fix":"560"},{"desc":"561","fix":"562"},{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"530","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"530","fix":"576"},{"desc":"530","fix":"577"},{"desc":"530","fix":"578"},{"desc":"545","fix":"579"},{"desc":"545","fix":"580"},{"desc":"530","fix":"581"},{"desc":"582","fix":"583"},"Update the dependencies array to be: [dispatch]",{"range":"584","text":"585"},"Update the dependencies array to be: [dispatch, store.isSearchAction]",{"range":"586","text":"587"},{"range":"588","text":"585"},"Update the dependencies array to be: [courseId, from, history]",{"range":"589","text":"590"},"Update the dependencies array to be: [isBuy, course, dispatch, history]",{"range":"591","text":"592"},"Update the dependencies array to be: [paginate.uri, paginate.currentPage, forcePage]",{"range":"593","text":"594"},{"range":"595","text":"585"},"Update the dependencies array to be: [isSubmit, setUser, user, formData, dispatch]",{"range":"596","text":"597"},{"range":"598","text":"585"},"Update the dependencies array to be: [isSubmit, formData, reset, dispatch]",{"range":"599","text":"600"},{"range":"601","text":"585"},"Update the dependencies array to be: [isAdd, userCourseStarId, loveIds, dispatch]",{"range":"602","text":"603"},"Update the dependencies array to be: [isSub, userCourseStarId, loveIds, dispatch]",{"range":"604","text":"605"},"Update the dependencies array to be: [isFeedback, feedbackContent, dispatch]",{"range":"606","text":"607"},"Update the dependencies array to be: [courseId, dispatch, history]",{"range":"608","text":"609"},{"range":"610","text":"585"},"Update the dependencies array to be: [isSubmit, formData, reset, user, dispatch]",{"range":"611","text":"612"},"Update the dependencies array to be: [dispatch, history]",{"range":"613","text":"614"},"Update the dependencies array to be: [dispatch, isUpdateView, video]",{"range":"615","text":"616"},"Update the dependencies array to be: [isSubmit, formData, courseId, onNewVideo, reset, dispatch]",{"range":"617","text":"618"},"Update the dependencies array to be: [isSubmit, formData, videoUpdate, courseId, isChooseFile, onUpdateVideo, dispatch]",{"range":"619","text":"620"},"Update the dependencies array to be: [isSubmit, formData, courseId, onNewSlide, reset, dispatch]",{"range":"621","text":"622"},"Update the dependencies array to be: [isSubmit, formData, slideUpdate, courseId, isChooseFile, onUpdateSlide, dispatch]",{"range":"623","text":"624"},{"range":"625","text":"585"},"Update the dependencies array to be: [isSubmit, formData, course, user, isChooseImgSmall, isChooseImgLarge, dispatch]",{"range":"626","text":"627"},"Update the dependencies array to be: [isDelete, course, user, dispatch]",{"range":"628","text":"629"},{"range":"630","text":"585"},{"range":"631","text":"585"},{"range":"632","text":"585"},{"range":"633","text":"600"},{"range":"634","text":"600"},{"range":"635","text":"585"},"Update the dependencies array to be: [isSub, userCourseStarId, loveIds, userCourses, dispatch]",{"range":"636","text":"637"},[915,917],"[dispatch]",[1082,1104],"[dispatch, store.isSearchAction]",[810,812],[1451,1461],"[courseId, from, history]",[2005,2020],"[isBuy, course, dispatch, history]",[336,372],"[paginate.uri, paginate.currentPage, forcePage]",[2070,2072],[3861,3896],"[isSubmit, setUser, user, formData, dispatch]",[2056,2058],[2934,2961],"[isSubmit, formData, reset, dispatch]",[1823,1825],[2730,2764],"[isAdd, userCourseStarId, loveIds, dispatch]",[3723,3757],"[isSub, userCourseStarId, loveIds, dispatch]",[1946,1975],"[isFeedback, feedbackContent, dispatch]",[1908,1910],"[courseId, dispatch, history]",[2684,2686],[4099,4132],"[isSubmit, formData, reset, user, dispatch]",[3031,3033],"[dispatch, history]",[1138,1159],"[dispatch, isUpdateView, video]",[2799,2848],"[isSubmit, formData, courseId, onNewVideo, reset, dispatch]",[3729,3801],"[isSubmit, formData, videoUpdate, courseId, isChooseFile, onUpdateVideo, dispatch]",[2742,2791],"[isSubmit, formData, courseId, onNewSlide, reset, dispatch]",[3690,3762],"[isSubmit, formData, slideUpdate, courseId, isChooseFile, onUpdateSlide, dispatch]",[4264,4266],[8665,8735],"[isSubmit, formData, course, user, isChooseImgSmall, isChooseImgLarge, dispatch]",[12485,12509],"[isDelete, course, user, dispatch]",[3912,3914],[3889,3891],[4278,4280],[2309,2336],[2098,2125],[1203,1205],[2300,2347],"[isSub, userCourseStarId, loveIds, userCourses, dispatch]"]